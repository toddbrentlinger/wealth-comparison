{"version":3,"sources":["classes/RichPerson.js","redux/actions.js","components/PersonSelectComponent.js","components/WealthSelector.js","components/DataArrayScroller.js","utilities.js","components/PersonNotesContainer.js","App.js","redux/reducers.js","redux/store.js","reportWebVitals.js","index.js"],"names":["RichPerson","jsonObj","this","bio","bios","about","abouts","employment","cache","push","personName","age","country","state","city","source","squareImage","startsWith","naturalId","finalWorth","idSet","Set","forEach","person","has","id","console","log","add","i","length","amount","basePerson","convertedPerson","Number","isNaN","worth","toFixed","changePerson","isFirst","type","changeAmount","PersonSelectComponent","props","selectedPerson","useSelector","first","second","dispatch","useDispatch","personSelectOptions","window","map","index","value","name","onChange","e","getRichPersonById","target","WealthSelector","selector","className","htmlFor","placeholder","DataArrayScroller","useState","indexDisplayed","setIndexDisplayed","changeIndexDisplayed","num","strArr","displayedDataComponent","buttons","onClick","icon","faChevronUp","faChevronDown","buttonEdge","addCommasToNumber","parseInt","toString","replace","createUserImage","thumbnail","src","alt","faUserCircle","PersonNotesContainer","firstPerson","secondPerson","scope","App","isLoading","setIsLoading","getDisplayedAmount","useEffect","fetch","headers","then","response","json","data","personList","personsLists","personData","wealthComparisonContainer","getRandomPerson","getRandomAmount","mainApp","Math","floor","random","initialState","personDataReducer","newState","action","Object","assign","convertAmount","createStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f73d632a.chunk.js","sourcesContent":["// TODO: Create base Person class to be extended \r\n// for similar functionality with RichPerson\r\nclass RichPerson {\r\n    constructor(jsonObj) {\r\n        this.jsonObj = jsonObj;\r\n\r\n        // Properties that are copied by reference.\r\n        // Use getters for primitive type properties that are copied by value\r\n        this.bio = jsonObj.bios;\r\n        this.about = jsonObj.abouts;\r\n        this.employment = jsonObj.employment;\r\n\r\n        // Add to static cache\r\n        RichPerson.cache.push(this);\r\n    }\r\n\r\n    // -----------------------------\r\n    // ---------- Getters ----------\r\n    // -----------------------------\r\n\r\n    // Use getters to reference JSON obj properties that are primitive\r\n    // types and would normally be copied by value, NOT reference\r\n    get name() { return this.jsonObj.personName; }\r\n    get age() { return this.jsonObj.age; }\r\n    get country() { return this.jsonObj.country; }\r\n    get state() { return this.jsonObj.state; }\r\n    get city() { return this.jsonObj.city; }\r\n    get source() { return this.jsonObj.source; }\r\n    get thumbnail() {\r\n        if (!this.jsonObj.squareImage)\r\n            return null;\r\n        if (this.jsonObj.squareImage.startsWith('http'))\r\n            return this.jsonObj.squareImage;\r\n        else\r\n            return `https:${this.jsonObj.squareImage}`;\r\n    }\r\n    get id() { return this.jsonObj.naturalId; }\r\n    get worth() { return this.jsonObj.finalWorth; }\r\n\r\n    // ------------------------------------\r\n    // ---------- Public Methods ----------\r\n    // ------------------------------------\r\n\r\n    // ---------------------------------------\r\n    // ---------- Static Properties ----------\r\n    // ---------------------------------------\r\n\r\n    static cache = [];\r\n\r\n    // ------------------------------------\r\n    // ---------- Static Methods ----------\r\n    // ------------------------------------\r\n\r\n    static checkForUniqueIds() {\r\n        let idSet = new Set();\r\n\r\n        this.cache.forEach(person => {\r\n            // If ID already in set, display error in console\r\n            if (idSet.has(person.id))\r\n                console.log(`ID: ${person.id} appears multiple times!`);\r\n            // Else add person to set\r\n            else\r\n                idSet.add(person.id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} id\r\n     */\r\n    static getRichPersonById(id) {\r\n        for (let i = 0; i < this.cache.length; i++) {\r\n            if (this.cache[i].id === id)\r\n                return this.cache[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns equivalent amount of convertedPerson compared to basePerson\r\n     * @param {Number} amount\r\n     * @param {RichPerson} basePerson\r\n     * @param {RichPerson} convertedPerson\r\n     */\r\n    static convertAmount(amount, basePerson, convertedPerson) {\r\n        if (!amount) return 0;\r\n\r\n        // Convert to number\r\n        amount = Number(amount);\r\n        if (isNaN(amount)) return 0;\r\n\r\n        return (amount * convertedPerson.worth / basePerson.worth).toFixed(2);\r\n    }\r\n}\r\n\r\nexport default RichPerson;","\r\n//export const ADD_USER = 'ADD_USER';\r\n\r\n//export function addUser(user) {\r\n//    return {\r\n//        type: 'ADD_USER',\r\n//        user // action payload\r\n//    };\r\n//}\r\n\r\n/**\r\n * \r\n * @param {RichPerson} person - RichPerson object reference\r\n * @param {Boolean} isFirst - If true, change first person, else change second\r\n */\r\nexport function changePerson(person, isFirst) {\r\n    return {\r\n        type: `CHANGE_${isFirst ? 'FIRST' : 'SECOND'}_PERSON`,\r\n        person\r\n    };\r\n}\r\n\r\n/**\r\n * \r\n * @param {Number} amount - Amount to change to\r\n * @param {Boolean} isFirst - If true, change first person amount, else change second amount\r\n */\r\nexport function changeAmount(amount, isFirst) {\r\n    return {\r\n        type: `CHANGE_${isFirst ? 'FIRST' : 'SECOND'}_AMOUNT`,\r\n        amount\r\n    };\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changePerson } from '../redux/actions.js';\r\nimport RichPerson from '../classes/RichPerson.js';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Boolean} props.isFirst\r\n */\r\nfunction PersonSelectComponent(props) {\r\n    const selectedPerson = useSelector(state => props.isFirst ? state.first.person : state.second.person);\r\n    const dispatch = useDispatch();\r\n\r\n    const personSelectOptions = window.RichPerson.cache\r\n        .map((person, index) =>\r\n            <option\r\n                key={index}\r\n                value={person.id}\r\n            >\r\n                {person.name}\r\n            </option>\r\n        );\r\n\r\n    return (\r\n        <select\r\n            value={selectedPerson ? selectedPerson.id : \"\"}\r\n            onChange={(e) => dispatch(changePerson(RichPerson.getRichPersonById(e.target.value), props.isFirst))}\r\n        >\r\n            <option\r\n                name=\"person-select\"\r\n                value=\"\"\r\n            >\r\n                -- Select --\r\n            </option>\r\n            {personSelectOptions}\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default PersonSelectComponent;","import React from 'react';\r\nimport PersonSelectComponent from './PersonSelectComponent.js';\r\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeAmount } from '../redux/actions.js';\r\nimport './WealthSelector.css';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Boolean} props.isFirst\r\n */\r\nfunction WealthSelector(props) {\r\n    const selector = useSelector(state => props.isFirst ? state.first : state.second);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"wealth-selector\">\r\n            <label htmlFor=\"currency-amount\"></label>\r\n            <input\r\n                name=\"currency-amount\"\r\n                type=\"text\"\r\n                value={selector.amount ? selector.amount : \"\"}\r\n                placeholder=\"Enter amount\"\r\n                onChange={(e) => dispatch(changeAmount(e.target.value, props.isFirst))}\r\n            />\r\n            <PersonSelectComponent isFirst={props.isFirst} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WealthSelector;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronCircleUp, faChevronCircleDown, faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\nimport './DataArrayScroller.css';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {String[]} props.strArr - Array of strings to display in <p> components\r\n * @param {String} props.buttonEdge - 'top/down/left/right for edge of buttons\r\n */\r\nfunction DataArrayScroller(props) {\r\n    // States\r\n\r\n    const [indexDisplayed, setIndexDisplayed] = useState(0);\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Sets the index displayed by limiting number between 0-length of props.strArr\r\n     * @param {Number} num\r\n     */\r\n    function changeIndexDisplayed(num) {\r\n        // Return if NOT a number\r\n        if (isNaN(num)) return;\r\n\r\n        // limit num with modulo operator\r\n        num %= props.strArr.length;\r\n\r\n        // Adjust if negative\r\n        if (num < 0)\r\n            num += props.strArr.length;\r\n\r\n        // Set num between 0 and length of array\r\n        setIndexDisplayed(num);\r\n    }\r\n\r\n    // Variables\r\n\r\n    //const componentArr = (\r\n    //    <div>\r\n    //        {props.strArr.map((str, i) => <p>{`${i+1}. ${str}`}</p>)}\r\n    //    </div>\r\n    //);\r\n\r\n    const displayedDataComponent = (\r\n        (props.strArr.length > 1)\r\n            ? <p className=\"displayed-data\">{`${indexDisplayed + 1}. ${props.strArr[indexDisplayed]}`}</p>\r\n            : <p className=\"displayed-data\">{props.strArr[indexDisplayed]}</p>\r\n    );\r\n\r\n    const buttons = (\r\n        <div className=\"scroll-button-container\">\r\n            <button onClick={() => changeIndexDisplayed(indexDisplayed - 1)}>\r\n                <FontAwesomeIcon icon={faChevronUp} className=\"scroll-button-icon\" />\r\n            </button>\r\n            <button onClick={() => changeIndexDisplayed(indexDisplayed + 1)}>\r\n                <FontAwesomeIcon icon={faChevronDown} className=\"scroll-button-icon\" />\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={`data-array-scroller-container ${props.buttonEdge}`}>\r\n            {displayedDataComponent}\r\n            {props.strArr.length > 1 ? buttons : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataArrayScroller;","\r\n/**\r\n * \r\n * @param {Number|String} num\r\n * @returns {String}\r\n */\r\nexport function addCommasToNumber(num) {\r\n    // If num is number, convert to string\r\n    if (!isNaN(parseInt(num, 10)))\r\n        num = num.toString();\r\n    // If num is string and more than 3 digits\r\n    if (typeof num === 'string' && num.length > 3\r\n    ) {\r\n        // Add comma after every 3rd index from end\r\n        return num.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    } else // Else return the num as is\r\n        return num;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String[]} arr\r\n * @returns {String}\r\n */\r\nexport function listArrayAsString(stringArray) {\r\n    if (!stringArray) return null;\r\n\r\n    // Check if argument is an array\r\n    if (Array.isArray(stringArray)) {\r\n        let arrayItemText = '';\r\n        // Loop through each value of array\r\n        for (let index = 0, arrLength = stringArray.length; index < arrLength; index++) {\r\n            arrayItemText += stringArray[index];\r\n            // If array length is more than 1 and index is NOT the last element\r\n            // If array length is 2, only add ' and '\r\n            // Else: If index is second to last element, add ', and ' Else add ', '\r\n            if (arrLength > 1 && index !== arrLength - 1) {\r\n                arrayItemText += (arrLength === 2) ? ' and '\r\n                    : (index === arrLength - 2) ? ', and ' : ', ';\r\n            }\r\n        }\r\n        // Return created string\r\n        return arrayItemText;\r\n    }\r\n\r\n    // If argument is string, return the same string\r\n    if (typeof stringArray === 'string')\r\n        return stringArray;\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport DataArrayScroller from './DataArrayScroller.js';\r\nimport { addCommasToNumber } from '../utilities.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUser, faUserCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport './PersonNotesContainer.css';\r\n\r\n/**\r\n * \r\n * @param {RichPerson} person\r\n */\r\nfunction createUserImage(person) {\r\n    if (!person || !person.thumbnail)\r\n        return <FontAwesomeIcon icon={faUserCircle} />\r\n\r\n    return <img src={person.thumbnail} alt={person.name} />\r\n}\r\n\r\nfunction PersonNotesContainer() {\r\n    const firstPerson = useSelector(state => state.first.person);\r\n    const secondPerson = useSelector(state => state.second.person);\r\n\r\n    //const labels = (\r\n    //    <ul id=\"labels-container\">\r\n    //        <li>Name</li>\r\n    //        <li>Worth</li>\r\n    //        <li>Age</li>\r\n    //        <li>City</li>\r\n    //        <li>State</li>\r\n    //        <li>Country</li>\r\n    //    </ul>\r\n    //);\r\n\r\n    //const temp = (\r\n    //    <div id=\"person-notes-container\">\r\n    //        {firstPerson ? <PersonNotes person={firstPerson} /> : null}\r\n    //        {firstPerson || secondPerson ? labels : null}\r\n    //        {secondPerson ? <PersonNotes person={secondPerson} /> : null}\r\n    //    </div>\r\n    //);\r\n\r\n    const table = (\r\n        <table id=\"person-notes-table\">\r\n            <caption>Information about each selected person or group.</caption>\r\n            <tbody>\r\n                <tr className=\"thumbnail-container\">\r\n                    <td>\r\n                        {createUserImage(firstPerson)}\r\n                    </td>\r\n                    <th scope=\"row\"></th>\r\n                    <td>\r\n                        {createUserImage(secondPerson)}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.name : \"---\"}</td>\r\n                    <th scope=\"row\">Name</th>\r\n                    <td>{secondPerson ? secondPerson.name : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? `$${addCommasToNumber(firstPerson.worth * 1000000)}` : \"---\"}</td>\r\n                    <th scope=\"row\">Worth</th>\r\n                    <td>{secondPerson ? `$${addCommasToNumber(secondPerson.worth * 1000000)}` : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.age : \"---\"}</td>\r\n                    <th scope=\"row\">Age</th>\r\n                    <td>{secondPerson ? secondPerson.age : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.city : \"---\"}</td>\r\n                    <th scope=\"row\">City</th>\r\n                    <td>{secondPerson ? secondPerson.city : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.state : \"---\"}</td>\r\n                    <th scope=\"row\">State</th>\r\n                    <td>{secondPerson ? secondPerson.state : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.country : \"---\"}</td>\r\n                    <th scope=\"row\">Country</th>\r\n                    <td>{secondPerson ? secondPerson.country : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.bio\r\n                            ? <DataArrayScroller strArr={firstPerson.bio} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Bio</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.bio\r\n                            ? <DataArrayScroller strArr={secondPerson.bio} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.about\r\n                            ? <DataArrayScroller strArr={firstPerson.about} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">About</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.about\r\n                            ? <DataArrayScroller strArr={secondPerson.about} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? null : \"---\"}</td>\r\n                    <th scope=\"row\"></th>\r\n                    <td>{secondPerson ? null : \"---\"}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    return table;\r\n}\r\n\r\nexport default PersonNotesContainer;","import React, { useState, useEffect } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport RichPerson from './classes/RichPerson.js';\r\nimport WealthSelector from './components/WealthSelector.js';\r\nimport PersonNotesContainer from './components/PersonNotesContainer.js';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changePerson, changeAmount } from './redux/actions.js';\r\nimport { addCommasToNumber } from './utilities.js';\r\n\r\n// Global variable to reference RichPerson cache\r\nwindow.RichPerson = RichPerson;\r\n\r\nfunction App() {\r\n    // States\r\n\r\n    //const [firstPerson, setFirstPerson] = useState(null);\r\n    //const [firstAmount, setFirstAmount] = useState(\"\");\r\n    //const [secondPerson, setSecondPerson] = useState(null);\r\n    //const [secondAmount, setSecondAmount] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // Variables\r\n\r\n    //const users = useSelector(state => state.users);\r\n    const first = useSelector(state => state.first);\r\n    const second = useSelector(state => state.second);\r\n    const dispatch = useDispatch();\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetch(\"forbesData.json\",\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                }\r\n            }\r\n        ).then((response) => response.json()\r\n        ).then((data) => {\r\n            data.personList.personsLists\r\n                .forEach(personData => new RichPerson(personData));\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    // TEMP\r\n    //useEffect(() => {\r\n    //    console.log(`First:\\nPerson: ${first.person ? first.person.name : null}\\nAmount: ${first.amount}`);\r\n    //    console.log(`Second:\\nPerson: ${second.person ? second.person.name: null}\\nAmount: ${second.amount}`);\r\n    //}, [first, second]);\r\n\r\n    // Functions\r\n\r\n    function getDisplayedAmount(amount) {\r\n        if (!amount) return 0;\r\n\r\n        amount = Number(amount);\r\n\r\n        if (amount <= 0) return 0;\r\n\r\n        return amount < 1000 ? amount : addCommasToNumber(amount.toFixed(0));\r\n    }\r\n\r\n    // Variables\r\n\r\n    const wealthComparisonContainer = (\r\n        <div id=\"wealth-comparison-container\">\r\n            <div className=\"person-container\">\r\n                <div>{`$${getDisplayedAmount(first.amount)}`}</div>\r\n                <WealthSelector isFirst={true} />\r\n            </div>\r\n            <div className=\"person-container\">\r\n                <div>{`$${getDisplayedAmount(second.amount)}`}</div>\r\n                <WealthSelector isFirst={false} />\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    //const wealthSelectors = (\r\n    //    <div id=\"wealth-selector-container\">\r\n    //        <WealthSelector isFirst={true} />\r\n    //        <WealthSelector isFirst={false} />\r\n    //    </div>\r\n    //);\r\n\r\n    // TEMP:\r\n    const buttons = (\r\n        <div id=\"random-buttons\">\r\n            <button\r\n                onClick={\r\n                    () => dispatch(changePerson(getRandomPerson(), true))\r\n                }\r\n            >\r\n                Random First Person\r\n                </button>\r\n            <button\r\n                onClick={() => dispatch(changeAmount(getRandomAmount(), true))}\r\n            >\r\n                Random First Amount\r\n                </button>\r\n            <button\r\n                onClick={\r\n                    () => dispatch(changePerson(getRandomPerson(), false))\r\n                }\r\n            >\r\n                Random Second Person\r\n                </button>\r\n            <button\r\n                onClick={() => dispatch(changeAmount(getRandomAmount(), false))}\r\n            >\r\n                Random Second Amount\r\n                </button>\r\n        </div>\r\n    );\r\n\r\n    const mainApp = (\r\n        <main>\r\n            {wealthComparisonContainer}\r\n            {first || second ? <PersonNotesContainer /> : null}\r\n        </main>\r\n    );\r\n\r\n    // Functions\r\n\r\n    function getRandomPerson() {\r\n        const index = Math.floor(Math.random() * RichPerson.cache.length);\r\n        return RichPerson.cache[index];\r\n    }\r\n\r\n    function getRandomAmount() {\r\n        return (Math.random() * 1000000).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Wealth Comparison</h1>\r\n            {buttons}\r\n            {isLoading ? null : mainApp}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","\r\n//import { ADD_USER } from './actions.js';\r\n\r\n//function userDataReducer(state = { 'users': ['Test'] }, action) {\r\n//    switch (action.type) {\r\n//        case 'ADD_USER':\r\n//            return Object.assign({}, state, {\r\n//                'users': [...state.users, action.user]\r\n//            });\r\n//        default:\r\n//            return state;\r\n//    }\r\n//}\r\n\r\n//export default userDataReducer;\r\n\r\nimport RichPerson from '../classes/RichPerson.js';\r\n\r\nconst initialState = {\r\n    first: {\r\n        person: null,\r\n        amount: null,\r\n    },\r\n    second: {\r\n        person: null,\r\n        amount: null,\r\n    }\r\n};\r\n\r\nfunction personDataReducer(state = initialState, action) {\r\n    let newState;\r\n    switch (action.type) {\r\n        case 'CHANGE_FIRST_PERSON':\r\n            newState = Object.assign({}, state, {\r\n                first: {\r\n                    ...state.first,\r\n                    person: action.person\r\n                }\r\n            });\r\n            if (action.person && state.second.person)\r\n                newState.first.amount = RichPerson.convertAmount(state.second.amount, state.second.person, action.person);\r\n            return newState;\r\n        case 'CHANGE_FIRST_AMOUNT':\r\n            newState = {\r\n                ...state,\r\n                first: {\r\n                    ...state.first,\r\n                    amount: action.amount\r\n                }\r\n            };\r\n            if (state.first.person && state.second.person)\r\n                newState.second.amount = RichPerson.convertAmount(action.amount, state.first.person, state.second.person);\r\n            return newState;\r\n        case 'CHANGE_SECOND_PERSON':\r\n            newState = Object.assign({}, state, {\r\n                second: {\r\n                    ...state.second,\r\n                    person: action.person\r\n                }\r\n            });\r\n            if (action.person && state.first.person)\r\n                newState.second.amount = RichPerson.convertAmount(state.first.amount, state.first.person, action.person);\r\n            return newState;\r\n        case 'CHANGE_SECOND_AMOUNT':\r\n            newState = {\r\n                ...state,\r\n                second: {\r\n                    ...state.second,\r\n                    amount: action.amount\r\n                }\r\n            };\r\n            if (state.first.person && state.second.person) {\r\n                newState.first.amount = RichPerson.convertAmount(action.amount, state.second.person, state.first.person);\r\n            }\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default personDataReducer;","\r\nimport { createStore } from 'redux';\r\nimport personDataReducer from './reducers.js';\r\n\r\nexport default createStore(personDataReducer);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
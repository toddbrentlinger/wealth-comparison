{"version":3,"sources":["classes/RichPerson.js","redux/actions.js","components/PersonSelectComponent.js","components/WealthSelector.js","components/DataArrayScroller.js","utilities.js","components/PersonNotesContainer.js","components/MinMaxRangeSlider.js","components/PersonSelectorPopup.js","components/FooterCustom.js","App.js","redux/reducers.js","redux/store.js","reportWebVitals.js","index.js"],"names":["RichPerson","jsonObj","this","bio","bios","about","abouts","employment","cache","push","personName","firstName","lastName","age","country","state","city","squareImage","startsWith","naturalId","finalWorth","gender","industries","source","organization","selfMadeRank","philanthropyScore","selfMade","searchTerm","obj","toLowerCase","includes","toString","Array","isArray","some","element","containsSearchTerm","from","Object","values","value","idSet","Set","forEach","person","has","id","console","log","add","i","length","amount","basePerson","convertedPerson","Number","isNaN","worth","toFixed","filterObj","filter","wealth","min","max","male","female","search","changePerson","isFirst","type","changeAmount","changeFilterAge","isMin","changeFilterWorth","PersonSelectComponent","props","selectedPerson","useSelector","first","second","dispatch","useDispatch","personSelectOptions","window","map","index","name","onChange","e","getRichPersonById","target","WealthSelector","selector","className","htmlFor","placeholder","DataArrayScroller","useState","indexDisplayed","setIndexDisplayed","changeIndexDisplayed","num","strArr","displayedDataComponent","buttons","onClick","icon","faChevronUp","faChevronDown","buttonEdge","addCommasToNumber","parseInt","replace","sortTwoStringsAlphabetically","firstStr","secondStr","convertNumToSimplifiedString","pow","error","createUserImage","thumbnail","src","alt","faUserCircle","PersonNotesContainer","firstPerson","secondPerson","property","isSelfMade","faCheck","table","scope","faTimes","Fragment","getPercentageOfValueBetweenTwoValues","val","MinMaxRangeSlider","startingMin","minLimit","maxLimit","minValue","setMinValue","startingMax","maxValue","setMaxValue","slider","useRef","sliderBar","sliderBarStart","sliderBarEnd","resultsElement","startX","currentX","targetBCR","sliderBCR","sliderStartX","sliderEndX","isDraggingBall","onStart","current","getBoundingClientRect","left","right","pageX","touches","preventDefault","onMove","onMinChange","calculateValue","calculatePercentage","onMaxChange","onEnd","updateSliderValues","tempMinValue","Math","round","tempMaxValue","style","positionInSlider","width","convertPercentageToValueInRange","percentage","step","getDisplayValueFromPercentage","useEffect","requestAnimationFrame","title","onMouseMove","onMouseLeave","onTouchMove","ref","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","convertValueToDisplay","initialState","reducer","prevState","action","newDisplayedPeople","displayedPeople","slice","newSortObj","sort","sortObj","toUpperCase","isAscending","reverse","PersonSelectorPopup","useReducer","popupSelector","wealthFilter","ageFilter","displayedPeopleElements","createPersonElement","setIsPersonSelectorPopupOpen","faWindowClose","faSearch","changeSortIsAscending","FooterCustom","currentYear","Date","getFullYear","getCopyrightString","App","isLoading","setIsLoading","isPersonSelectorPopupOpen","getDisplayedAmount","handlePersonSelectButtonClick","fetch","headers","then","response","json","data","personList","personsLists","personData","wealthComparisonContainer","faExchangeAlt","getRandomPerson","getRandomAmount","mainApp","floor","random","isDisplayed","countries","filterDisplayedPeople","sortDisplayedPeople","personDataReducer","newState","assign","convertAmount","createStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.646104ad.chunk.js","sourcesContent":["// TODO: Create base Person class to be extended \r\n// for similar functionality with RichPerson\r\nclass RichPerson {\r\n    constructor(jsonObj) {\r\n        this.jsonObj = jsonObj;\r\n\r\n        // Properties that are copied by reference.\r\n        // Use getters for primitive type properties that are copied by value\r\n        this.bio = jsonObj.bios;\r\n        this.about = jsonObj.abouts;\r\n        this.employment = jsonObj.employment;\r\n\r\n        // Add to static cache\r\n        RichPerson.cache.push(this);\r\n    }\r\n\r\n    // -----------------------------\r\n    // ---------- Getters ----------\r\n    // -----------------------------\r\n\r\n    // Use getters to reference JSON obj properties that are primitive\r\n    // types and would normally be copied by value, NOT reference\r\n    get name() { return this.jsonObj.personName; }\r\n    get firstName() { return this.jsonObj.firstName; }\r\n    get lastName() { return this.jsonObj.lastName; }\r\n    get age() { return this.jsonObj.age; }\r\n    get country() { return this.jsonObj.country; }\r\n    get state() { return this.jsonObj.state; }\r\n    get city() { return this.jsonObj.city; }\r\n    get thumbnail() {\r\n        if (!this.jsonObj.squareImage)\r\n            return null;\r\n        if (this.jsonObj.squareImage.startsWith('http'))\r\n            return this.jsonObj.squareImage;\r\n        else\r\n            return `https:${this.jsonObj.squareImage}`;\r\n    }\r\n    get id() { return this.jsonObj.naturalId; }\r\n    get worth() { return this.jsonObj.finalWorth; }\r\n    get gender() {\r\n        switch (this.jsonObj.gender) {\r\n            case 'M':\r\n                return 'Male';\r\n            case 'F':\r\n                return 'Female';\r\n            default:\r\n                return 'Other';\r\n        }\r\n    }\r\n    get industries() { return this.jsonObj.industries[0]; }\r\n    get source() { return this.jsonObj.source; }\r\n    get organization() { return this.jsonObj.organization; }\r\n    get selfMadeRank() { return this.jsonObj.selfMadeRank; }\r\n    get philanthropyScore() { return this.jsonObj.philanthropyScore; }\r\n    get isSelfMade() { return this.jsonObj.selfMade; }\r\n\r\n    // ------------------------------------\r\n    // ---------- Public Methods ----------\r\n    // ------------------------------------\r\n\r\n    /**\r\n     * Recursive function to search each property of class instance.\r\n     * @param {String} searchTerm\r\n     * @param {any} obj\r\n     * @returns {Boolean}\r\n     */\r\n    containsSearchTerm(searchTerm, obj = this) {\r\n        // String\r\n        if (typeof obj === 'string') {\r\n            return obj.toLowerCase().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Number\r\n        if (typeof obj === 'number') {\r\n            return obj.toString().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Array\r\n        if (Array.isArray(obj)) {\r\n            return obj.some(element => this.containsSearchTerm(searchTerm, element));\r\n        }\r\n        // Object\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            return Array.from(Object.values(obj))\r\n                .some(value => this.containsSearchTerm(searchTerm, value));\r\n        }\r\n        // Other\r\n        return false;\r\n    }\r\n\r\n    // ---------------------------------------\r\n    // ---------- Static Properties ----------\r\n    // ---------------------------------------\r\n\r\n    static cache = [];\r\n\r\n    // ------------------------------------\r\n    // ---------- Static Methods ----------\r\n    // ------------------------------------\r\n\r\n    static checkForUniqueIds() {\r\n        let idSet = new Set();\r\n\r\n        this.cache.forEach(person => {\r\n            // If ID already in set, display error in console\r\n            if (idSet.has(person.id))\r\n                console.log(`ID: ${person.id} appears multiple times!`);\r\n            // Else add person to set\r\n            else\r\n                idSet.add(person.id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} id\r\n     */\r\n    static getRichPersonById(id) {\r\n        for (let i = 0; i < this.cache.length; i++) {\r\n            if (this.cache[i].id === id)\r\n                return this.cache[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns equivalent amount of convertedPerson compared to basePerson\r\n     * @param {Number} amount\r\n     * @param {RichPerson} basePerson\r\n     * @param {RichPerson} convertedPerson\r\n     */\r\n    static convertAmount(amount, basePerson, convertedPerson) {\r\n        if (!amount) return 0;\r\n\r\n        // Convert to number\r\n        amount = Number(amount);\r\n        if (isNaN(amount)) return 0;\r\n\r\n        return (amount * convertedPerson.worth / basePerson.worth).toFixed(2);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Object} filterObj\r\n     * @param {String} filterObj.search\r\n     * @param {Object} filterObj.wealth\r\n     * @param {Number} filterObj.wealth.min\r\n     * @param {Number} filterObj.wealth.max - Use infinite max if negative number\r\n     * @param {Object} filterObj.sex\r\n     * @param {Boolean} filterObj.sex.male\r\n     * @param {Boolean} filterObj.sex.female\r\n     * @param {Object} filterObj.age\r\n     * @param {Number} filterObj.age.min\r\n     * @param {Number} filterObj.age.max - Use infinite max if negative number\r\n     * @param {String[]} filterObj.countries - Array of countries to include, empty array includes all\r\n     *\r\n     */\r\n    static getfilteredPeople(filterObj) {\r\n        return this.cache.filter(person => {\r\n            // Wealth\r\n            if (filterObj.wealth && filterObj.wealth.min > 0 && filterObj.wealth.max >= 0) {\r\n                if (person.worth >= filterObj.wealth.min && person.worth <= filterObj.wealth.max)\r\n                    return true;\r\n            }\r\n\r\n            // Sex\r\n            if (filterObj.gender) {\r\n                if (filterObj.gender.male && filterObj.gender.female)\r\n                    return true;\r\n                if (filterObj.gender.male && person.gender === 'male')\r\n                    return true;\r\n                else if (filterObj.gender.female && person.gender === 'female')\r\n                    return true;\r\n            }\r\n\r\n            // Age\r\n            // Countries\r\n\r\n            // Search\r\n            if (filterObj.search && person.containsSearchTerm(filterObj.search))\r\n                return true;\r\n\r\n            return false;\r\n        });\r\n    }\r\n}\r\n\r\nexport default RichPerson;","\r\n//export const ADD_USER = 'ADD_USER';\r\n\r\n//export function addUser(user) {\r\n//    return {\r\n//        type: 'ADD_USER',\r\n//        user // action payload\r\n//    };\r\n//}\r\n\r\n/**\r\n * \r\n * @param {RichPerson} person - RichPerson object reference\r\n * @param {Boolean} isFirst - If true, change first person, else change second\r\n */\r\nexport function changePerson(person, isFirst) {\r\n    return {\r\n        type: `CHANGE_${isFirst ? 'FIRST' : 'SECOND'}_PERSON`,\r\n        person\r\n    };\r\n}\r\n\r\n/**\r\n * \r\n * @param {Number} amount - Amount to change to\r\n * @param {Boolean} isFirst - If true, change first person amount, else change second amount\r\n */\r\nexport function changeAmount(amount, isFirst) {\r\n    return {\r\n        type: `CHANGE_${isFirst ? 'FIRST' : 'SECOND'}_AMOUNT`,\r\n        amount\r\n    };\r\n}\r\n\r\n// --------------------------\r\n// ---------- SORT ----------\r\n// --------------------------\r\n\r\n/**\r\n * \r\n * @param {String} value\r\n */\r\nexport function changeSortType(value) {\r\n    return {\r\n        type: `CHANGE_SORT_TYPE`,\r\n        value\r\n    };\r\n}\r\n\r\n/**\r\n * \r\n * @param {Boolean} isAscending\r\n */\r\nexport function changeSortIsAscending(isAscending = false) {\r\n    return {\r\n        type: `CHANGE_SORT_DIRECTION`,\r\n        value: isAscending\r\n    };\r\n}\r\n\r\n// ----------------------------\r\n// ---------- FILTER ----------\r\n// ----------------------------\r\n\r\n/**\r\n * \r\n * @param {Number} value\r\n * @param {Boolean} isMin\r\n */\r\nexport function changeFilterAge(value, isMin) {\r\n    return {\r\n        type: `CHANGE_FILTER_${isMin ? 'MIN' : 'MAX'}_AGE`,\r\n        value\r\n    };\r\n}\r\n\r\n/**\r\n * \r\n * @param {Number} amount\r\n * @param {Boolean} isMin\r\n */\r\nexport function changeFilterWorth(amount, isMin) {\r\n    return {\r\n        type: `CHANGE_FILTER_${isMin ? 'MIN' : 'MAX'}_WORTH`,\r\n        amount\r\n    };\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changePerson } from '../redux/actions.js';\r\nimport RichPerson from '../classes/RichPerson.js';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Boolean} props.isFirst\r\n */\r\nfunction PersonSelectComponent(props) {\r\n    const selectedPerson = useSelector(state => props.isFirst ? state.first.person : state.second.person);\r\n    const dispatch = useDispatch();\r\n\r\n    const personSelectOptions = window.RichPerson.cache\r\n        .map((person, index) =>\r\n            <option\r\n                key={index}\r\n                value={person.id}\r\n            >\r\n                {person.name}\r\n            </option>\r\n        );\r\n\r\n    return (\r\n        <select\r\n            value={selectedPerson ? selectedPerson.id : \"\"}\r\n            onChange={(e) => dispatch(changePerson(RichPerson.getRichPersonById(e.target.value), props.isFirst))}\r\n        >\r\n            <option\r\n                name=\"person-select\"\r\n                value=\"\"\r\n            >\r\n                -- Select --\r\n            </option>\r\n            {personSelectOptions}\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default PersonSelectComponent;","import React from 'react';\r\nimport PersonSelectComponent from './PersonSelectComponent.js';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeAmount } from '../redux/actions.js';\r\nimport './WealthSelector.css';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Boolean} props.isFirst\r\n */\r\nfunction WealthSelector(props) {\r\n    const selector = useSelector(state => props.isFirst ? state.first : state.second);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"wealth-selector\">\r\n            <label htmlFor=\"currency-amount\"></label>\r\n            <input\r\n                name=\"currency-amount\"\r\n                type=\"text\"\r\n                value={selector.amount ? selector.amount : \"\"}\r\n                placeholder=\"Enter amount\"\r\n                onChange={(e) => dispatch(changeAmount(e.target.value, props.isFirst))}\r\n            />\r\n            <PersonSelectComponent isFirst={props.isFirst} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WealthSelector;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { /*faChevronCircleUp, faChevronCircleDown,*/ faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\nimport './DataArrayScroller.css';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {String[]} props.strArr - Array of strings to display in <p> components\r\n * @param {String} props.buttonEdge - 'top/down/left/right for edge of buttons\r\n */\r\nfunction DataArrayScroller(props) {\r\n    // States\r\n\r\n    const [indexDisplayed, setIndexDisplayed] = useState(0);\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Sets the index displayed by limiting number between 0-length of props.strArr\r\n     * @param {Number} num\r\n     */\r\n    function changeIndexDisplayed(num) {\r\n        // Return if NOT a number\r\n        if (isNaN(num)) return;\r\n\r\n        // limit num with modulo operator\r\n        num %= props.strArr.length;\r\n\r\n        // Adjust if negative\r\n        if (num < 0)\r\n            num += props.strArr.length;\r\n\r\n        // Set num between 0 and length of array\r\n        setIndexDisplayed(num);\r\n    }\r\n\r\n    // Variables\r\n\r\n    //const componentArr = (\r\n    //    <div>\r\n    //        {props.strArr.map((str, i) => <p>{`${i+1}. ${str}`}</p>)}\r\n    //    </div>\r\n    //);\r\n\r\n    const displayedDataComponent = (\r\n        (props.strArr.length > 1)\r\n            ? <p className=\"displayed-data\">{`${indexDisplayed + 1}/${props.strArr.length} | ${props.strArr[indexDisplayed]}`}</p>\r\n            : <p className=\"displayed-data\">{props.strArr[indexDisplayed]}</p>\r\n    );\r\n\r\n    const buttons = (\r\n        <div className=\"scroll-button-container\">\r\n            <button onClick={() => changeIndexDisplayed(indexDisplayed - 1)}>\r\n                <FontAwesomeIcon icon={faChevronUp} className=\"scroll-button-icon\" />\r\n            </button>\r\n            <button onClick={() => changeIndexDisplayed(indexDisplayed + 1)}>\r\n                <FontAwesomeIcon icon={faChevronDown} className=\"scroll-button-icon\" />\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={`data-array-scroller-container ${props.buttonEdge}`}>\r\n            {displayedDataComponent}\r\n            {props.strArr.length > 1 ? buttons : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataArrayScroller;","\r\n/**\r\n * \r\n * @param {Number|String} num\r\n * @returns {String}\r\n */\r\nexport function addCommasToNumber(num) {\r\n    // If num is number, convert to string\r\n    if (!isNaN(parseInt(num, 10)))\r\n        num = num.toString();\r\n    // If num is string and more than 3 digits\r\n    if (typeof num === 'string' && num.length > 3\r\n    ) {\r\n        // Add comma after every 3rd index from end\r\n        return num.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    } else // Else return the num as is\r\n        return num;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String[]} arr\r\n * @returns {String}\r\n */\r\nexport function listArrayAsString(stringArray) {\r\n    if (!stringArray) return null;\r\n\r\n    // Check if argument is an array\r\n    if (Array.isArray(stringArray)) {\r\n        let arrayItemText = '';\r\n        // Loop through each value of array\r\n        for (let index = 0, arrLength = stringArray.length; index < arrLength; index++) {\r\n            arrayItemText += stringArray[index];\r\n            // If array length is more than 1 and index is NOT the last element\r\n            // If array length is 2, only add ' and '\r\n            // Else: If index is second to last element, add ', and ' Else add ', '\r\n            if (arrLength > 1 && index !== arrLength - 1) {\r\n                arrayItemText += (arrLength === 2) ? ' and '\r\n                    : (index === arrLength - 2) ? ', and ' : ', ';\r\n            }\r\n        }\r\n        // Return created string\r\n        return arrayItemText;\r\n    }\r\n\r\n    // If argument is string, return the same string\r\n    if (typeof stringArray === 'string')\r\n        return stringArray;\r\n}\r\n\r\n/**\r\n * Sort callback function for Array sort method to sort alphabetically.\r\n * @param {String} firstStr\r\n * @param {String} secondStr\r\n * @returns {Number}\r\n */\r\nexport function sortTwoStringsAlphabetically(firstStr, secondStr) {\r\n    if (firstStr < secondStr) return -1;\r\n    if (firstStr > secondStr) return 1;\r\n    return 0; // strings must be equal\r\n}\r\n\r\n/**\r\n * Converts number to simplified string of number with letter at the end.\r\n * @param {Number} num\r\n * @returns {String}\r\n */\r\nexport function convertNumToSimplifiedString(num) {\r\n    if (Number.isNaN(num)) { // if num is Not A Number\r\n        num = Number(num); // try to convert parameter to Number\r\n        if (Number.isNaN(num)) { // if num is still Not A Number\r\n            console.error(`Parameter is NOT a number.`);\r\n            return;\r\n        }\r\n    }\r\n\r\n    if (num < 1000)\r\n        return num.toString();\r\n\r\n    // If reach here, num is more than or equal to 1,000\r\n\r\n    let pow = 0;\r\n    while (num >= 1000 && pow < 15) {\r\n        pow += 3;\r\n        num /= 1000;\r\n    }\r\n\r\n    // Remove any fractional part of num\r\n    num = num.toFixed(0);\r\n\r\n    /*\r\n    switch (pow) {\r\n        case 0: return num.toString(); // Case should be unreachable\r\n        case 3: return num + 'K';\r\n        case 6: return num + 'M';\r\n        case 9: return num + 'B';\r\n        case 12: return num + 'T';\r\n        case 15: return num + 'Q';\r\n        default: return num.toString();\r\n    }\r\n    */\r\n    // Alternate to switch to consider all possible pow values\r\n    if (pow < 3) return num.toString();\r\n    if (pow < 6) return num + 'K';\r\n    if (pow < 9) return num + 'M';\r\n    if (pow < 12) return num + 'B';\r\n    if (pow < 15) return num + 'T';\r\n    // If reach here, pow is 15 or more\r\n    return num + 'Q';\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport DataArrayScroller from './DataArrayScroller.js';\r\nimport { addCommasToNumber, convertNumToSimplifiedString } from '../utilities.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { /*faUser,*/ faUserCircle, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './PersonNotesContainer.css';\r\n\r\n/**\r\n * \r\n * @param {RichPerson} person\r\n */\r\nfunction createUserImage(person) {\r\n    if (!person || !person.thumbnail)\r\n        return <FontAwesomeIcon icon={faUserCircle} className=\"thumbnail-image\" />\r\n\r\n    return <img src={person.thumbnail} alt={person.name} className=\"thumbnail-image\" />\r\n}\r\n\r\nfunction PersonNotesContainer() {\r\n    const firstPerson = useSelector(state => state.first.person);\r\n    const secondPerson = useSelector(state => state.second.person);\r\n\r\n    //const labels = (\r\n    //    <ul id=\"labels-container\">\r\n    //        <li>Name</li>\r\n    //        <li>Worth</li>\r\n    //        <li>Age</li>\r\n    //        <li>City</li>\r\n    //        <li>State</li>\r\n    //        <li>Country</li>\r\n    //    </ul>\r\n    //);\r\n\r\n    //const temp = (\r\n    //    <div id=\"person-notes-container\">\r\n    //        {firstPerson ? <PersonNotes person={firstPerson} /> : null}\r\n    //        {firstPerson || secondPerson ? labels : null}\r\n    //        {secondPerson ? <PersonNotes person={secondPerson} /> : null}\r\n    //    </div>\r\n    //);\r\n\r\n    function createPersonNotesTableRow(title, property) {\r\n        return (\r\n            <tr>\r\n                <td>{firstPerson && firstPerson[property]\r\n                    ? firstPerson[property]\r\n                    : \"---\"}\r\n                </td>\r\n                <th scope=\"row\">{title}</th>\r\n                <td>{secondPerson && secondPerson[property]\r\n                    ? secondPerson[property]\r\n                    : \"---\"}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    const newTable = (\r\n        <table id=\"person-notes-table\">\r\n            <caption>Information about each selected person or group.</caption>\r\n            <tbody>\r\n                {createPersonNotesTableRow(\"Name\", \"name\")}\r\n                <tr>\r\n                    <td>{firstPerson ? `$${addCommasToNumber(firstPerson.worth * 1000000)} ($${convertNumToSimplifiedString(firstPerson.worth * 1000000)})` : \"---\"}</td>\r\n                    <th scope=\"row\">Worth</th>\r\n                    <td>{secondPerson ? `$${addCommasToNumber(secondPerson.worth * 1000000)} ($${convertNumToSimplifiedString(secondPerson.worth * 1000000)})` : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.source : \"---\"}</td>\r\n                    <th scope=\"row\">Source</th>\r\n                    <td>{secondPerson ? secondPerson.source : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.age : \"---\"}</td>\r\n                    <th scope=\"row\">Age</th>\r\n                    <td>{secondPerson ? secondPerson.age : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.gender : \"---\"}</td>\r\n                    <th scope=\"row\">Gender</th>\r\n                    <td>{secondPerson ? secondPerson.gender : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.city : \"---\"}</td>\r\n                    <th scope=\"row\">City</th>\r\n                    <td>{secondPerson ? secondPerson.city : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.state : \"---\"}</td>\r\n                    <th scope=\"row\">State</th>\r\n                    <td>{secondPerson ? secondPerson.state : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.country : \"---\"}</td>\r\n                    <th scope=\"row\">Country</th>\r\n                    <td>{secondPerson ? secondPerson.country : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.bio\r\n                            ? <DataArrayScroller strArr={firstPerson.bio} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Bio</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.bio\r\n                            ? <DataArrayScroller strArr={secondPerson.bio} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.about\r\n                            ? <DataArrayScroller strArr={firstPerson.about} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">About</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.about\r\n                            ? <DataArrayScroller strArr={secondPerson.about} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson && firstPerson.industries\r\n                        ? firstPerson.industries\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Industries</th>\r\n                    <td>{secondPerson && secondPerson.industries\r\n                        ? secondPerson.industries\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson\r\n                        ? (firstPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : null)\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Self Made</th>\r\n                    <td>{secondPerson\r\n                        ? (secondPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : null)\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson && firstPerson.selfMadeRank\r\n                        ? firstPerson.selfMadeRank\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Self Made Rank</th>\r\n                    <td>{secondPerson && secondPerson.selfMadeRank\r\n                        ? secondPerson.selfMadeRank\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson && firstPerson.philanthropyScore\r\n                        ? firstPerson.philanthropyScore\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Philanthropy Score</th>\r\n                    <td>{secondPerson && secondPerson.philanthropyScore\r\n                        ? secondPerson.philanthropyScore\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    const table = (\r\n        <table id=\"person-notes-table\">\r\n            <caption>Information about each selected person or group.</caption>\r\n            <tbody>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.name : \"---\"}</span></td>\r\n                    <th scope=\"row\">Name</th>\r\n                    <td><span>{secondPerson ? secondPerson.name : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? `$${addCommasToNumber(firstPerson.worth * 1000000)} ($${convertNumToSimplifiedString(firstPerson.worth * 1000000)})` : \"---\"}</span></td>\r\n                    <th scope=\"row\">Worth</th>\r\n                    <td><span>{secondPerson ? `$${addCommasToNumber(secondPerson.worth * 1000000)} ($${convertNumToSimplifiedString(secondPerson.worth * 1000000)})` : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.source : \"---\"}</span></td>\r\n                    <th scope=\"row\">Source</th>\r\n                    <td><span>{secondPerson ? secondPerson.source : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.age : \"---\"}</span></td>\r\n                    <th scope=\"row\">Age</th>\r\n                    <td><span>{secondPerson ? secondPerson.age : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.gender : \"---\"}</span></td>\r\n                    <th scope=\"row\">Gender</th>\r\n                    <td><span>{secondPerson ? secondPerson.gender : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.city : \"---\"}</span></td>\r\n                    <th scope=\"row\">City</th>\r\n                    <td><span>{secondPerson ? secondPerson.city : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.state : \"---\"}</span></td>\r\n                    <th scope=\"row\">State</th>\r\n                    <td><span>{secondPerson ? secondPerson.state : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.country : \"---\"}</span></td>\r\n                    <th scope=\"row\">Country</th>\r\n                    <td><span>{secondPerson ? secondPerson.country : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.bio\r\n                            ? <DataArrayScroller strArr={firstPerson.bio} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Bio</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.bio\r\n                            ? <DataArrayScroller strArr={secondPerson.bio} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.about\r\n                            ? <DataArrayScroller strArr={firstPerson.about} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">About</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.about\r\n                            ? <DataArrayScroller strArr={secondPerson.about} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson && firstPerson.industries\r\n                                ? firstPerson.industries\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Industries</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson && secondPerson.industries\r\n                                ? secondPerson.industries\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson\r\n                                ? (firstPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : <FontAwesomeIcon icon={faTimes} />)\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Self Made</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson\r\n                                ? (secondPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : <FontAwesomeIcon icon={faTimes} />)\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson && firstPerson.selfMadeRank\r\n                                ? firstPerson.selfMadeRank\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Self Made Rank</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson && secondPerson.selfMadeRank\r\n                                ? secondPerson.selfMadeRank\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson && firstPerson.philanthropyScore\r\n                                ? firstPerson.philanthropyScore\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Philanthropy Score</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson && secondPerson.philanthropyScore\r\n                                ? secondPerson.philanthropyScore\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"thumbnail-container\">\r\n                {createUserImage(firstPerson)}\r\n                {createUserImage(secondPerson)}\r\n            </div>\r\n            {table}\r\n        </React.Fragment>    \r\n        );\r\n    }\r\n    \r\nexport default PersonNotesContainer;","import React, { useRef, useState, useEffect } from 'react';\r\nimport './MinMaxRangeSlider.css';\r\n\r\n// TODO: Move to utilities.js\r\nfunction getPercentageOfValueBetweenTwoValues(val, min, max) {\r\n    return (val - min) / (max - min);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Number} props.minLimit\r\n * @param {Number} props.maxLimit\r\n * @param {Number} props.step - change in value with each tick (determines number of ticks)\r\n * @param {Number} props.startingMin - starting min value (checked value is between min/max limits)\r\n * @param {Number} props.startingMax - starting max value (checked value is between min/max limits)\r\n * @param {Function} props.onMinChange - function to run when min is changed (ex. action function for Redux to send through dispatch)\r\n * @param {Function} props.onMaxChange - function to run when max is changed (ex. action function for Redux to send through dispatch)\r\n * \r\n * TODO:\r\n * - \r\n */\r\nfunction MinMaxRangeSlider(props) {\r\n    // States\r\n    //const [values, setValues] = useState([]);\r\n    const [minValue, setMinValue] = useState(\r\n        getPercentageOfValueBetweenTwoValues(\r\n            props.startingMin, props.minLimit, props.maxLimit\r\n        ) * 100 || 0\r\n    );\r\n    const [maxValue, setMaxValue] = useState(\r\n        getPercentageOfValueBetweenTwoValues(\r\n            props.startingMax, props.minLimit, props.maxLimit\r\n        ) * 100 || 100\r\n    );\r\n\r\n    // Refs\r\n    const slider = useRef(null); // element reference\r\n    const sliderBar = useRef(null); // element reference\r\n    const sliderBarStart = useRef(null); // min ball element reference\r\n    const sliderBarEnd = useRef(null); // max ball element reference\r\n\r\n    const resultsElement = useRef(null); // element reference\r\n\r\n    //const minValue = useRef(props.startingMin || 0);\r\n    //const maxValue = useRef(props.startingMax || 100);\r\n    const startX = useRef(0); // starting x-position when first click ball\r\n    const currentX = useRef(0); // current x-position when dragging ball\r\n    const target = useRef(null); // element reference to min/max ball that is moving\r\n    const targetBCR = useRef(null); // moving slider ball bounding client rect (DOMRect object)\r\n    const sliderBCR = useRef(null); // slider bar bounding client rect (DOMRect object)\r\n    const sliderStartX = useRef(null); // sliderBCR.left\r\n    const sliderEndX = useRef(null); // sliderBCR.right\r\n    const isDraggingBall = useRef(false);\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        extractValues();\r\n        //updateSliderValues();\r\n        requestAnimationFrame(updateSliderValues);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updateSliderValues();\r\n    });\r\n\r\n    function onStart(e) {\r\n        //console.log(`onStart runs`);\r\n\r\n        target.current = e.target;\r\n        sliderBCR.current = slider.current.getBoundingClientRect();\r\n        targetBCR.current = target.current.getBoundingClientRect();\r\n\r\n        sliderStartX.current = sliderBCR.current.left;\r\n        sliderEndX.current = sliderBCR.current.right;\r\n\r\n        startX.current = e.pageX || e.touches[0].pageX;\r\n        currentX.current = startX.current;\r\n\r\n        isDraggingBall.current = true;\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    function onMove(e) {\r\n        if (!isDraggingBall.current || !target.current) return;\r\n\r\n        currentX.current = e.pageX || e.touches[0].pageX;\r\n\r\n        if (currentX.current < sliderStartX.current || currentX.current > sliderEndX.current)\r\n            return;\r\n\r\n        if (target.current === sliderBarStart.current) {\r\n            props.onMinChange(calculateValue(currentX.current - sliderStartX.current));\r\n            setMinValue(calculatePercentage(currentX.current - sliderStartX.current));\r\n        }\r\n        if (target.current === sliderBarEnd.current) {\r\n            props.onMaxChange(calculateValue(currentX.current - sliderStartX.current));\r\n            setMaxValue(calculatePercentage(currentX.current - sliderStartX.current));\r\n        }\r\n\r\n        //console.log(`onMove completes`);\r\n    }\r\n\r\n    function onEnd() {\r\n        //console.log(`onEnd starts`);\r\n\r\n        if (!isDraggingBall.current || !target.current) return;\r\n\r\n        isDraggingBall.current = false;\r\n\r\n        //console.log(`onEnd completes`);\r\n    }\r\n\r\n    function extractValues() {\r\n\r\n    }\r\n\r\n    function updateSliderValues() {\r\n        //console.log(`updateSliderValues starts`);\r\n        let tempMinValue = Math.round(minValue);\r\n        let tempMaxValue = Math.round(maxValue);\r\n\r\n        sliderBar.current.style.left = `${tempMinValue}%`;\r\n        sliderBar.current.style.right = `${100 - tempMaxValue}%`;\r\n    }\r\n\r\n    /**\r\n     * Calculates percentage (0-100%) of position along slider\r\n     * @param {Number} positionInSlider\r\n     */\r\n    function calculatePercentage(positionInSlider) {\r\n        return positionInSlider / sliderBCR.current.width * 100;\r\n    }\r\n\r\n    /**\r\n     * Calculates value from percentage and min/max limits.\r\n     * @param {Number} percentage\r\n     */\r\n    function convertPercentageToValueInRange(percentage) {\r\n        return props.minLimit + percentage * (props.maxLimit - props.minLimit);\r\n    }\r\n\r\n    /**\r\n     * Calculates value using position along slider, step, and min/max limits\r\n     * @param {Number} positionInSlider\r\n     */\r\n    function calculateValue(positionInSlider) {\r\n        const percentage = positionInSlider / sliderBCR.current.width;\r\n        const value = convertPercentageToValueInRange(percentage);\r\n        return props.step * Math.round(value / props.step);\r\n    }\r\n\r\n    /**\r\n     * Converts percentage to value for display that accounts for step and min/max\r\n     * @param {Number} percentage\r\n     * @returns {Number}\r\n     */\r\n    function getDisplayValueFromPercentage(percentage) {\r\n        const value = convertPercentageToValueInRange(percentage);\r\n        return props.step * Math.round(value / props.step);\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-max-range-slider\">\r\n            <div className=\"slider-title\">{props.title}</div>\r\n            <div\r\n                className=\"slider-target\"\r\n                onMouseMove={onMove}\r\n                onMouseLeave={onEnd}\r\n                onTouchMove={onMove}\r\n            >\r\n                <div\r\n                    className=\"slider\"\r\n                    ref={slider}\r\n                >\r\n                    <div className=\"slider-bar\" ref={sliderBar}>\r\n                        <span\r\n                            className=\"slider-ball-min\"\r\n                            ref={sliderBarStart}\r\n                            onMouseDown={onStart}\r\n                            onMouseUp={onEnd}\r\n                            onTouchStart={onStart}\r\n                            onTouchEnd={onEnd}\r\n                        ></span>\r\n                        <span\r\n                            className=\"slider-ball-max\"\r\n                            ref={sliderBarEnd}\r\n                            onMouseDown={onStart}\r\n                            onMouseUp={onEnd}\r\n                            onTouchStart={onStart}\r\n                            onTouchEnd={onEnd}\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"results\" ref={resultsElement}>\r\n                <div>Min:\r\n                    <span className=\"min-result\">\r\n                        {\r\n                            props.convertValueToDisplay\r\n                                ? props.convertValueToDisplay(getDisplayValueFromPercentage(minValue / 100))\r\n                                : getDisplayValueFromPercentage(minValue / 100)\r\n                        }\r\n                    </span>\r\n                </div>\r\n                <div>Max:\r\n                    <span className=\"max-result\">\r\n                        {\r\n                            props.convertValueToDisplay\r\n                                ? props.convertValueToDisplay(getDisplayValueFromPercentage(maxValue / 100))\r\n                                : getDisplayValueFromPercentage(maxValue / 100)\r\n                        }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MinMaxRangeSlider;","import React, { useReducer, useEffect } from 'react';\r\nimport MinMaxRangeSlider from './MinMaxRangeSlider.js';\r\nimport RichPerson from '../classes/RichPerson.js';\r\nimport { convertNumToSimplifiedString } from '../utilities.js';\r\n// Redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeSortType, changeSortIsAscending, changeFilterAge, changeFilterWorth } from '../redux/actions.js';\r\n// Font Awesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWindowClose, faSearch } from '@fortawesome/free-solid-svg-icons';\r\n// Stylesheets\r\nimport './PersonSelectorPopup.css';\r\n\r\n/**\r\n * Returns new RichPerson[] after filtering with filterObj parameter.\r\n * @param {Object} filterObj\r\n * @param {String} filterObj.search\r\n * @param {String} filterObj.search\r\n * @returns {RichPerson[]}\r\n */\r\nfunction filterDisplayedPeople(filterObj) {\r\n    let newDisplayedPeople = RichPerson.cache.slice();\r\n    // \r\n}\r\n\r\n/**\r\n * Sorts RichPerson array in-place with sortObj parameter\r\n * @param {RichPerson[]} displayedPeople\r\n * @param {Object} sortObj\r\n */\r\nfunction sortDisplayedPeople(displayedPeople, sortObj) {\r\n    // If sort type is 'none', return\r\n    if (sortObj.type === 'none') return;\r\n\r\n    // Sort in ascending order\r\n    displayedPeople.sort((first, second) => {\r\n        switch (sortObj.type) {\r\n            // Age\r\n            case 'age':\r\n                return first.age - second.age;\r\n\r\n            // Alphabetical\r\n            case 'first-name':\r\n                return sortTwoStringsAlphabetically(\r\n                    first.firstName.toUpperCase(), second.firstName.toUpperCase()\r\n                );\r\n\r\n            case 'last-name':\r\n                return sortTwoStringsAlphabetically(\r\n                    first.lastName.toUpperCase(), second.lastName.toUpperCase()\r\n                );\r\n\r\n            // Worth\r\n            case 'worth':\r\n                return first.worth - second.worth;\r\n\r\n            default:\r\n                return 0;\r\n        }\r\n    });\r\n\r\n    // Reverse array if isAscending is false\r\n    if (!sortObj.isAscending)\r\n        displayedPeople.reverse();\r\n}\r\n\r\n/**\r\n * Sort callback function for Array sort method to sort alphabetically.\r\n * @param {String} firstStr\r\n * @param {String} secondStr\r\n * @returns {Number}\r\n */\r\nfunction sortTwoStringsAlphabetically(firstStr, secondStr) {\r\n    if (firstStr < secondStr) return -1;\r\n    if (firstStr > secondStr) return 1;\r\n    return 0; // strings must be equal\r\n}\r\n\r\nconst initialState = {\r\n    'displayedPeople': RichPerson.cache,\r\n    'sort': {\r\n        'isAscending': false,\r\n        'type': 'worth',\r\n    },\r\n    'filter': {\r\n        'search': \"\",\r\n        'sex': \"both\",\r\n        'wealth': {\r\n            'min': 0,\r\n            'max': 1000000000000, // one trillion dollars\r\n        },\r\n        'age': {\r\n            'min': 0,\r\n            'max': 100,\r\n        },\r\n        'countries': 'all',\r\n    },\r\n};\r\n\r\nfunction reducer(prevState, action) {\r\n    switch (action.type) {\r\n        case 'sortByType':\r\n            let newDisplayedPeople = prevState.displayedPeople.slice();\r\n            let newSortObj = { ...prevState.sort, 'type': action.value };\r\n            sortDisplayedPeople(newDisplayedPeople, newSortObj);\r\n            return {\r\n                ...prevState,\r\n                'displayedPeople': newDisplayedPeople,\r\n                'sort': newSortObj\r\n            };\r\n        case 'sortByDirection':\r\n            if (prevState.sort.isAscending === action.value)\r\n                return prevState;\r\n            return {\r\n                ...prevState,\r\n                'displayedPeople': prevState.displayedPeople.slice().reverse(),\r\n                'sort': {\r\n                    ...prevState.sort,\r\n                    'isAscending': !prevState.sort.isAscending\r\n                }\r\n            };\r\n        case 'search':\r\n        case 'filter':\r\n            break;\r\n        case 'reset':\r\n            break;\r\n        default:\r\n            return prevState;\r\n    }\r\n}\r\n\r\n/**\r\n * React component popup box to sort/filter/search list of people before selecting one\r\n * @param {Object} props\r\n * @param {Function} props.setSelectedPerson - Function to set selected person\r\n * @param {Function} props.setIsPersonSelectorPopupOpen - Function to set bool whether to display popup box\r\n */\r\nfunction PersonSelectorPopup(props) {\r\n    // Reducer\r\n\r\n    const [state, dispatchReducer] = useReducer(reducer, initialState);\r\n\r\n    // Redux\r\n    const displayedPeople = useSelector(state => state.popupSelector.displayedPeople);\r\n    const sortObj = useSelector(state => state.popupSelector.sort);\r\n    const wealthFilter = useSelector(state => state.popupSelector.filter.worth);\r\n    //const genderFilter = useSelector(state => state.popupSelector.filter.search);\r\n    const ageFilter = useSelector(state => state.popupSelector.filter.age);\r\n    const dispatch = useDispatch();\r\n\r\n    // Hooks\r\n\r\n    // Variables\r\n\r\n    const displayedPeopleElementsOld = state.displayedPeople.map(person =>\r\n        <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n            <span>{person.name}</span>\r\n            <span>{convertNumToSimplifiedString(person.worth * 1000000)}</span>\r\n            <span>{person.age}</span>\r\n        </div>\r\n    );\r\n\r\n    const displayedPeopleElements = displayedPeople\r\n        .map(person => createPersonElement(person)); \r\n\r\n    function createPersonElement(person) {\r\n        switch (sortObj.type) {\r\n            case 'worth':\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{`$${convertNumToSimplifiedString(person.worth * 1000000)}`}</span>\r\n                        <span>{person.name}</span>\r\n                    </div>\r\n                );\r\n            case 'age':\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{person.age}</span>\r\n                        <span>{person.name}</span>\r\n                    </div>\r\n                );\r\n            case 'first-name':\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{person.name}</span>\r\n                        <span>{`$${convertNumToSimplifiedString(person.worth * 1000000)}`}</span>\r\n                    </div>\r\n                );\r\n            case 'last-name':\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{`${person.lastName}, ${person.firstName}`}</span>\r\n                        <span>{`$${convertNumToSimplifiedString(person.worth * 1000000)}`}</span>\r\n                    </div>\r\n                );\r\n            default:\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{person.name}</span>\r\n                        <span>{`$${convertNumToSimplifiedString(person.worth * 1000000)}`}</span>\r\n                        <span>{person.age}</span>\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n\r\n    const peopleListTable = (\r\n        <table>\r\n            <caption></caption>\r\n            <tbody>\r\n                <tr>\r\n                    <th></th>\r\n                </tr>\r\n                {\r\n                    state.displayedPeople.map(person => (\r\n                        <tr className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                            \r\n                        </tr>\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    \r\n    function handleWealthConvertValueToDisplay(val) {\r\n        //console.log(`handleWealthConvertValueToDisplay starts with val: ${val}`);\r\n        return convertNumToSimplifiedString(Math.pow(10, val));\r\n    }\r\n\r\n    return (\r\n        <div id=\"person-selector-popup\">\r\n            <div className=\"person-selector-popup-content\">\r\n                <div className=\"person-selector-popup-top-bar\">\r\n                    <div className=\"top-bar-title\">Select Person To Compare</div>\r\n                    <span\r\n                        className=\"close\"\r\n                        onClick={() => props.setIsPersonSelectorPopupOpen(false)}\r\n                    >\r\n                        <FontAwesomeIcon icon={faWindowClose} />\r\n                    </span>\r\n                </div>\r\n                <div className=\"search-container\">\r\n                    <form>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search...\"\r\n                            name=\"search\"\r\n                        />\r\n                        <button type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSearch} />\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"filter-sort-displayed-container\">\r\n                    <div className=\"filter-container\">\r\n                        Filter\r\n                        <MinMaxRangeSlider\r\n                            title=\"Age\"\r\n                            minLimit={0}\r\n                            maxLimit={120}\r\n                            step={1}\r\n                            startingMin={18}\r\n                            startingMax={100}\r\n                            onMinChange={val => dispatch(changeFilterAge(val, true))}\r\n                            onMaxChange={val => dispatch(changeFilterAge(val, false))}\r\n                        />\r\n                        <p>State Age Min: <span>{ageFilter.min}</span></p>\r\n                        <p>State Age Max: <span>{ageFilter.max}</span></p>\r\n                        <MinMaxRangeSlider\r\n                            title=\"Worth\"\r\n                            minLimit={3}\r\n                            maxLimit={12}\r\n                            step={1}\r\n                            startingMin={6}\r\n                            startingMax={9}\r\n                            onMinChange={val => dispatch(changeFilterWorth(val, true))}\r\n                            onMaxChange={val => dispatch(changeFilterWorth(val, false))}\r\n                            convertValueToDisplay={handleWealthConvertValueToDisplay}\r\n                        />\r\n                        <p>State Worth Min: <span>{convertNumToSimplifiedString(wealthFilter.min.toFixed(0))}</span></p>\r\n                        <p>State Worth Max: <span>{convertNumToSimplifiedString(wealthFilter.max.toFixed(0))}</span></p>\r\n                    </div>\r\n                    <div className=\"sort-and-displayed-container\">\r\n                        <div className=\"sort-container\">\r\n                            <label htmlFor=\"sort-type-select\">\r\n                                {\"Sort: \"}\r\n                                <select\r\n                                    name=\"sort-type\"\r\n                                    id=\"sort-type-select\"\r\n                                    value={sortObj.type}\r\n                                    onChange={(e) => {\r\n                                        //dispatchReducer({ 'type': 'sortByType', 'value': e.target.value, });\r\n                                        dispatch(changeSortType(e.target.value));\r\n                                    }}\r\n                                >\r\n                                    <option value=\"none\">-- Sort By --</option>\r\n                                    <option value=\"worth\">Worth</option>\r\n                                    <option value=\"age\">Age</option>\r\n                                    <option value=\"first-name\">First Name</option>\r\n                                    <option value=\"last-name\">Last Name</option>\r\n                                </select>\r\n                            </label>\r\n\r\n                            <label htmlFor=\"sort-direction-select\">\r\n                                {\"Direction: \"}\r\n                                <select\r\n                                    name=\"sort-direction\"\r\n                                    id=\"sort-direction-select\"\r\n                                    value={sortObj.isAscending ? \"ascending\" : \"descending\"}\r\n                                    onChange={(e) => {\r\n                                        //dispatchReducer({ 'type': 'sortByDirection', 'value': (e.target.value === \"ascending\") });\r\n                                        dispatch(changeSortIsAscending(e.target.value === \"ascending\"));\r\n                                    }}\r\n                                >\r\n                                    <option value=\"descending\">Descending</option>\r\n                                    <option value=\"ascending\">Ascending</option>\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"displayed-people-container\">\r\n                            <div className=\"displayed-people-list\">\r\n                                {displayedPeopleElements}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonSelectorPopup;","import React from 'react';\r\nimport './FooterCustom.css';\r\n\r\nfunction FooterCustom() {\r\n    function getCopyrightString() {\r\n        const currentYear = new Date().getFullYear();\r\n        return currentYear === 2021\r\n            ? 2021\r\n            : `2021-${currentYear}`;\r\n    }\r\n\r\n    return (\r\n        <footer className=\"App-footer\">\r\n            <p>\r\n                <small>\r\n                    Source Code &copy; <time id=\"copyright-current-year\">{getCopyrightString()}</time> Todd Brentlinger, Santa Cruz, CA, USA. All Rights Reserved.\r\n                </small>\r\n            </p>\r\n            <p>\r\n                <small>\r\n                    Last modified on <time id=\"lastModifiedDate\"></time>\r\n                </small>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default FooterCustom;","import React, { useState, useEffect } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport RichPerson from './classes/RichPerson.js';\r\nimport WealthSelector from './components/WealthSelector.js';\r\nimport PersonNotesContainer from './components/PersonNotesContainer.js';\r\nimport PersonSelectorPopup from './components/PersonSelectorPopup.js';\r\nimport FooterCustom from './components/FooterCustom.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changePerson, changeAmount } from './redux/actions.js';\r\nimport { addCommasToNumber, convertNumToSimplifiedString } from './utilities.js';\r\n\r\n// TEMP\r\nwindow.convertNumToSimplifiedString = convertNumToSimplifiedString;\r\n\r\n// Global variable to reference RichPerson cache\r\nwindow.RichPerson = RichPerson;\r\n\r\nfunction App() {\r\n    // States\r\n\r\n    //const [firstPerson, setFirstPerson] = useState(null);\r\n    //const [firstAmount, setFirstAmount] = useState(\"\");\r\n    //const [secondPerson, setSecondPerson] = useState(null);\r\n    //const [secondAmount, setSecondAmount] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isPersonSelectorPopupOpen, setIsPersonSelectorPopupOpen] = useState(false);\r\n\r\n    // Variables\r\n\r\n    //const users = useSelector(state => state.users);\r\n    const first = useSelector(state => state.first);\r\n    const second = useSelector(state => state.second);\r\n    const dispatch = useDispatch();\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetch(\"forbesData.json\",\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                }\r\n            }\r\n        ).then((response) => response.json()\r\n        ).then((data) => {\r\n            data.personList.personsLists\r\n                .forEach(personData => new RichPerson(personData));\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    // TEMP\r\n    //useEffect(() => {\r\n    //    console.log(`First:\\nPerson: ${first.person ? first.person.name : null}\\nAmount: ${first.amount}`);\r\n    //    console.log(`Second:\\nPerson: ${second.person ? second.person.name: null}\\nAmount: ${second.amount}`);\r\n    //}, [first, second]);\r\n\r\n    // Functions\r\n\r\n    function getDisplayedAmount(amount) {\r\n        if (!amount) return 0;\r\n\r\n        amount = Number(amount);\r\n\r\n        if (amount <= 0) return 0;\r\n\r\n        return amount < 1000 ? amount : addCommasToNumber(amount.toFixed(0));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Boolean} isFirst\r\n     */\r\n    function handlePersonSelectButtonClick(isFirst = true) {\r\n        setIsPersonSelectorPopupOpen(true);\r\n\r\n    }\r\n\r\n    // Variables\r\n\r\n    const wealthComparisonContainer = (\r\n        <div id=\"wealth-comparison-container\">\r\n            <div className=\"person-container\">\r\n                <div>{`$${getDisplayedAmount(first.amount)}`}</div>\r\n                <WealthSelector isFirst={true} />\r\n                <button onClick={() => handlePersonSelectButtonClick(true)}>Change Person</button>\r\n            </div>\r\n            <div className=\"exchange-icon\">\r\n                <FontAwesomeIcon icon={faExchangeAlt} />\r\n            </div>\r\n            <div className=\"person-container\">\r\n                <div>{`$${getDisplayedAmount(second.amount)}`}</div>\r\n                <WealthSelector isFirst={false} />\r\n                <button onClick={() => handlePersonSelectButtonClick(false)}>Change Person</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    //const wealthSelectors = (\r\n    //    <div id=\"wealth-selector-container\">\r\n    //        <WealthSelector isFirst={true} />\r\n    //        <WealthSelector isFirst={false} />\r\n    //    </div>\r\n    //);\r\n\r\n    // TEMP:\r\n    const buttons = (\r\n        <div id=\"random-buttons\">\r\n            <button\r\n                onClick={\r\n                    () => dispatch(changePerson(getRandomPerson(), true))\r\n                }\r\n            >\r\n                Random First Person\r\n                </button>\r\n            <button\r\n                onClick={() => dispatch(changeAmount(getRandomAmount(), true))}\r\n            >\r\n                Random First Amount\r\n                </button>\r\n            <button\r\n                onClick={\r\n                    () => dispatch(changePerson(getRandomPerson(), false))\r\n                }\r\n            >\r\n                Random Second Person\r\n                </button>\r\n            <button\r\n                onClick={() => dispatch(changeAmount(getRandomAmount(), false))}\r\n            >\r\n                Random Second Amount\r\n                </button>\r\n        </div>\r\n    );\r\n\r\n    const mainApp = (\r\n        <main>\r\n            {isPersonSelectorPopupOpen\r\n                ? <PersonSelectorPopup setIsPersonSelectorPopupOpen={setIsPersonSelectorPopupOpen} />\r\n                : null}\r\n            {wealthComparisonContainer}\r\n            {first || second ? <PersonNotesContainer /> : null}\r\n        </main>\r\n    );\r\n\r\n    // Functions\r\n\r\n    function getRandomPerson() {\r\n        const index = Math.floor(Math.random() * RichPerson.cache.length);\r\n        return RichPerson.cache[index];\r\n    }\r\n\r\n    function getRandomAmount() {\r\n        return (Math.random() * 1000000).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Wealth Comparison</h1>\r\n            {buttons}\r\n            {isLoading ? null : mainApp}\r\n            {buttons}\r\n            <FooterCustom />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","\r\n//import { ADD_USER } from './actions.js';\r\n\r\n//function userDataReducer(state = { 'users': ['Test'] }, action) {\r\n//    switch (action.type) {\r\n//        case 'ADD_USER':\r\n//            return Object.assign({}, state, {\r\n//                'users': [...state.users, action.user]\r\n//            });\r\n//        default:\r\n//            return state;\r\n//    }\r\n//}\r\n\r\n//export default userDataReducer;\r\n\r\nimport RichPerson from '../classes/RichPerson.js';\r\nimport { sortTwoStringsAlphabetically } from '../utilities.js';\r\n\r\nconst initialState = {\r\n    first: {\r\n        person: null,\r\n        amount: null,\r\n    },\r\n    second: {\r\n        person: null,\r\n        amount: null,\r\n    },\r\n    popupSelector: {\r\n        isDisplayed: false,\r\n        displayedPeople: RichPerson.cache,\r\n        sort: {\r\n            isAscending: false,\r\n            type: 'worth',\r\n        },\r\n        filter: {\r\n            search: \"\",\r\n            gender: \"all\",\r\n            worth: { // 10^n - use Math.pow(10,n) to get value\r\n                min: 0,\r\n                max: -1, // Use infinite max if negative number\r\n            },\r\n            age: {\r\n                min: 0,\r\n                max: -1, // Use infinite max if negative number\r\n            },\r\n            countries: [], // show all countries if empty\r\n        },\r\n    },\r\n};\r\n\r\n/**\r\n * \r\n * @param {Object} filterObj\r\n * @param {String} filterObj.search\r\n * @param {String} filterObj.gender\r\n * @param {Object} filterObj.worth\r\n * @param {Number} filterObj.worth.min\r\n * @param {Number} filterObj.worth.max\r\n * @param {Object} filterObj.age\r\n * @param {Number} filterObj.age.min\r\n * @param {Number} filterObj.age.max\r\n * @param {String[]} filterObj.countries\r\n * @returns {RichPerson[]} - Filtered array of Person objects\r\n */\r\nfunction filterDisplayedPeople(filterObj) {\r\n    return RichPerson.cache.filter(person => {\r\n        // Worth - Min\r\n        if (person.worth < Math.pow(10, filterObj.worth.min - 6))\r\n            return false;\r\n\r\n        // Worth - Max (account for negative values representing infinite max)\r\n        if (filterObj.worth.max > 0 && person.worth > Math.pow(10, filterObj.worth.max - 6))\r\n            return false;\r\n\r\n        // Age - Min\r\n        if (person.age < filterObj.age.min)\r\n            return false;\r\n\r\n        // Age - Max (account for negative values representing infinite max)\r\n        if (filterObj.age.max > 0 && person.age > filterObj.age.max)\r\n            return false;\r\n\r\n        return true;\r\n    });\r\n}\r\n\r\n/**\r\n * Sorts RichPerson array in-place with sortObj parameter\r\n * @param {RichPerson[]} displayedPeople\r\n * @param {Object} sortObj\r\n */\r\nfunction sortDisplayedPeople(displayedPeople, sortObj) {\r\n    // If sort type is 'none', return\r\n    if (sortObj.type === 'none') return;\r\n\r\n    // Sort in ascending order\r\n    displayedPeople.sort((first, second) => {\r\n        switch (sortObj.type) {\r\n            // Age\r\n            case 'age':\r\n                return first.age - second.age;\r\n\r\n            // Alphabetical\r\n            case 'first-name':\r\n                return sortTwoStringsAlphabetically(\r\n                    first.firstName.toUpperCase(), second.firstName.toUpperCase()\r\n                );\r\n\r\n            case 'last-name':\r\n                return sortTwoStringsAlphabetically(\r\n                    first.lastName.toUpperCase(), second.lastName.toUpperCase()\r\n                );\r\n\r\n            // Worth\r\n            case 'worth':\r\n                return first.worth - second.worth;\r\n\r\n            default:\r\n                return 0;\r\n        }\r\n    });\r\n\r\n    // Reverse array if isAscending is false\r\n    if (!sortObj.isAscending)\r\n        displayedPeople.reverse();\r\n}\r\n\r\nfunction personDataReducer(state = initialState, action) {\r\n    let newState, newDisplayedPeople;\r\n    switch (action.type) {\r\n        case 'CHANGE_FIRST_PERSON':\r\n            newState = Object.assign({}, state, {\r\n                first: {\r\n                    ...state.first,\r\n                    person: action.person\r\n                }\r\n            });\r\n            if (action.person && state.second.person)\r\n                newState.first.amount = RichPerson.convertAmount(state.second.amount, state.second.person, action.person);\r\n            return newState;\r\n        case 'CHANGE_FIRST_AMOUNT':\r\n            newState = {\r\n                ...state,\r\n                first: {\r\n                    ...state.first,\r\n                    amount: action.amount\r\n                }\r\n            };\r\n            if (state.first.person && state.second.person)\r\n                newState.second.amount = RichPerson.convertAmount(action.amount, state.first.person, state.second.person);\r\n            return newState;\r\n        case 'CHANGE_SECOND_PERSON':\r\n            newState = Object.assign({}, state, {\r\n                second: {\r\n                    ...state.second,\r\n                    person: action.person\r\n                }\r\n            });\r\n            if (action.person && state.first.person)\r\n                newState.second.amount = RichPerson.convertAmount(state.first.amount, state.first.person, action.person);\r\n            return newState;\r\n        case 'CHANGE_SECOND_AMOUNT':\r\n            newState = {\r\n                ...state,\r\n                second: {\r\n                    ...state.second,\r\n                    amount: action.amount\r\n                }\r\n            };\r\n            if (state.first.person && state.second.person) {\r\n                newState.first.amount = RichPerson.convertAmount(action.amount, state.second.person, state.first.person);\r\n            }\r\n            return newState;\r\n        case 'CHANGE_FILTER_MIN_AGE':\r\n            newState = {\r\n                ...state.popupSelector.filter,\r\n                age: {\r\n                    ...state.popupSelector.filter.age,\r\n                    min: action.value\r\n                }\r\n            };\r\n            newDisplayedPeople = filterDisplayedPeople(newState);\r\n            sortDisplayedPeople(newDisplayedPeople, state.popupSelector.sort);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    filter: newState\r\n                }\r\n            };\r\n        case 'CHANGE_FILTER_MAX_AGE':\r\n            newState = {\r\n                ...state.popupSelector.filter,\r\n                age: {\r\n                    ...state.popupSelector.filter.age,\r\n                    max: action.value\r\n                }\r\n            };\r\n            newDisplayedPeople = filterDisplayedPeople(newState);\r\n            sortDisplayedPeople(newDisplayedPeople, state.popupSelector.sort);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    filter: newState\r\n                }\r\n            };\r\n        case 'CHANGE_FILTER_MIN_WORTH':\r\n            newState = {\r\n                ...state.popupSelector.filter,\r\n                worth: {\r\n                    ...state.popupSelector.filter.worth,\r\n                    min: action.amount\r\n                }\r\n            };\r\n            newDisplayedPeople = filterDisplayedPeople(newState);\r\n            sortDisplayedPeople(newDisplayedPeople, state.popupSelector.sort);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    filter: newState\r\n                }\r\n            };\r\n        case 'CHANGE_FILTER_MAX_WORTH':\r\n            newState = {\r\n                ...state.popupSelector.filter,\r\n                worth: {\r\n                    ...state.popupSelector.filter.worth,\r\n                    max: action.amount\r\n                }\r\n            };\r\n            newDisplayedPeople = filterDisplayedPeople(newState);\r\n            sortDisplayedPeople(newDisplayedPeople, state.popupSelector.sort);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    filter: newState\r\n                }\r\n            };\r\n        case 'CHANGE_SORT_TYPE':\r\n            newState = {\r\n                ...state.popupSelector.sort,\r\n                type: action.value\r\n            };\r\n            newDisplayedPeople = state.popupSelector.displayedPeople.slice();\r\n            sortDisplayedPeople(newDisplayedPeople, newState);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    sort: newState\r\n                }\r\n            };\r\n        case 'CHANGE_SORT_DIRECTION':\r\n            if (state.popupSelector.sort.isAscending === action.value)\r\n                return state;\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: state.popupSelector.displayedPeople.slice().reverse(),\r\n                    sort: {\r\n                        ...state.popupSelector.sort,\r\n                        isAscending: !state.popupSelector.sort.isAscending\r\n                    }\r\n                }\r\n            };\r\n        case 'CHANGE_SEARCH':\r\n        case 'CHANGE_FILTER':\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default personDataReducer;","\r\nimport { createStore } from 'redux';\r\nimport personDataReducer from './reducers.js';\r\n\r\nexport default createStore(personDataReducer);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
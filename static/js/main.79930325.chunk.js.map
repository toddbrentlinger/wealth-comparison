{"version":3,"sources":["classes/RichPerson.js","redux/actions.js","components/PersonSelectComponent.js","components/WealthSelector.js","components/DataArrayScroller.js","utilities.js","components/PersonNotesContainer.js","components/MinMaxRangeSlider.js","components/PersonSelectorPopup.js","components/FooterCustom.js","App.js","redux/reducers.js","redux/store.js","reportWebVitals.js","index.js"],"names":["RichPerson","jsonObj","this","bio","bios","about","abouts","employment","cache","push","personName","firstName","lastName","age","country","state","city","squareImage","startsWith","naturalId","finalWorth","gender","industries","source","organization","selfMadeRank","philanthropyScore","selfMade","searchTerm","obj","toLowerCase","includes","toString","Array","isArray","some","element","containsSearchTerm","from","Object","values","value","idSet","Set","forEach","person","has","id","console","log","add","i","length","amount","basePerson","convertedPerson","Number","isNaN","worth","toFixed","filterObj","filter","wealth","min","max","male","female","search","changePerson","isFirst","type","changeAmount","PersonSelectComponent","props","selectedPerson","useSelector","first","second","dispatch","useDispatch","personSelectOptions","window","map","index","name","onChange","e","getRichPersonById","target","WealthSelector","selector","className","htmlFor","placeholder","DataArrayScroller","useState","indexDisplayed","setIndexDisplayed","changeIndexDisplayed","num","strArr","displayedDataComponent","buttons","onClick","icon","faChevronUp","faChevronDown","buttonEdge","addCommasToNumber","parseInt","replace","createUserImage","thumbnail","src","alt","faUserCircle","PersonNotesContainer","firstPerson","secondPerson","property","isSelfMade","faCheck","table","scope","faTimes","Fragment","MinMaxRangeSlider","data-min","data-max","sortTwoStringsAlphabetically","firstStr","secondStr","initialState","reducer","prevState","action","newDisplayedPeople","displayedPeople","slice","newSortObj","sort","sortObj","toUpperCase","isAscending","reverse","PersonSelectorPopup","useReducer","useEffect","displayedPeopleElements","setIsPersonSelectorPopupOpen","faWindowClose","faSearch","FooterCustom","currentYear","Date","getFullYear","getCopyrightString","App","isLoading","setIsLoading","isPersonSelectorPopupOpen","getDisplayedAmount","handlePersonSelectButtonClick","fetch","headers","then","response","json","data","personList","personsLists","personData","wealthComparisonContainer","faExchangeAlt","getRandomPerson","getRandomAmount","mainApp","Math","floor","random","popupSelector","isDisplayed","countries","personDataReducer","newState","assign","convertAmount","createStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.79930325.chunk.js","sourcesContent":["// TODO: Create base Person class to be extended \r\n// for similar functionality with RichPerson\r\nclass RichPerson {\r\n    constructor(jsonObj) {\r\n        this.jsonObj = jsonObj;\r\n\r\n        // Properties that are copied by reference.\r\n        // Use getters for primitive type properties that are copied by value\r\n        this.bio = jsonObj.bios;\r\n        this.about = jsonObj.abouts;\r\n        this.employment = jsonObj.employment;\r\n\r\n        // Add to static cache\r\n        RichPerson.cache.push(this);\r\n    }\r\n\r\n    // -----------------------------\r\n    // ---------- Getters ----------\r\n    // -----------------------------\r\n\r\n    // Use getters to reference JSON obj properties that are primitive\r\n    // types and would normally be copied by value, NOT reference\r\n    get name() { return this.jsonObj.personName; }\r\n    get firstName() { return this.jsonObj.firstName; }\r\n    get lastName() { return this.jsonObj.lastName; }\r\n    get age() { return this.jsonObj.age; }\r\n    get country() { return this.jsonObj.country; }\r\n    get state() { return this.jsonObj.state; }\r\n    get city() { return this.jsonObj.city; }\r\n    get thumbnail() {\r\n        if (!this.jsonObj.squareImage)\r\n            return null;\r\n        if (this.jsonObj.squareImage.startsWith('http'))\r\n            return this.jsonObj.squareImage;\r\n        else\r\n            return `https:${this.jsonObj.squareImage}`;\r\n    }\r\n    get id() { return this.jsonObj.naturalId; }\r\n    get worth() { return this.jsonObj.finalWorth; }\r\n    get gender() {\r\n        switch (this.jsonObj.gender) {\r\n            case 'M':\r\n                return 'Male';\r\n            case 'F':\r\n                return 'Female';\r\n            default:\r\n                return 'Other';\r\n        }\r\n    }\r\n    get industries() { return this.jsonObj.industries[0]; }\r\n    get source() { return this.jsonObj.source; }\r\n    get organization() { return this.jsonObj.organization; }\r\n    get selfMadeRank() { return this.jsonObj.selfMadeRank; }\r\n    get philanthropyScore() { return this.jsonObj.philanthropyScore; }\r\n    get isSelfMade() { return this.jsonObj.selfMade; }\r\n\r\n    // ------------------------------------\r\n    // ---------- Public Methods ----------\r\n    // ------------------------------------\r\n\r\n    /**\r\n     * Recursive function to search each property of class instance.\r\n     * @param {String} searchTerm\r\n     * @param {any} obj\r\n     * @returns {Boolean}\r\n     */\r\n    containsSearchTerm(searchTerm, obj = this) {\r\n        // String\r\n        if (typeof obj === 'string') {\r\n            return obj.toLowerCase().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Number\r\n        if (typeof obj === 'number') {\r\n            return obj.toString().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Array\r\n        if (Array.isArray(obj)) {\r\n            return obj.some(element => this.containsSearchTerm(searchTerm, element));\r\n        }\r\n        // Object\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            return Array.from(Object.values(obj))\r\n                .some(value => this.containsSearchTerm(searchTerm, value));\r\n        }\r\n        // Other\r\n        return false;\r\n    }\r\n\r\n    // ---------------------------------------\r\n    // ---------- Static Properties ----------\r\n    // ---------------------------------------\r\n\r\n    static cache = [];\r\n\r\n    // ------------------------------------\r\n    // ---------- Static Methods ----------\r\n    // ------------------------------------\r\n\r\n    static checkForUniqueIds() {\r\n        let idSet = new Set();\r\n\r\n        this.cache.forEach(person => {\r\n            // If ID already in set, display error in console\r\n            if (idSet.has(person.id))\r\n                console.log(`ID: ${person.id} appears multiple times!`);\r\n            // Else add person to set\r\n            else\r\n                idSet.add(person.id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} id\r\n     */\r\n    static getRichPersonById(id) {\r\n        for (let i = 0; i < this.cache.length; i++) {\r\n            if (this.cache[i].id === id)\r\n                return this.cache[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns equivalent amount of convertedPerson compared to basePerson\r\n     * @param {Number} amount\r\n     * @param {RichPerson} basePerson\r\n     * @param {RichPerson} convertedPerson\r\n     */\r\n    static convertAmount(amount, basePerson, convertedPerson) {\r\n        if (!amount) return 0;\r\n\r\n        // Convert to number\r\n        amount = Number(amount);\r\n        if (isNaN(amount)) return 0;\r\n\r\n        return (amount * convertedPerson.worth / basePerson.worth).toFixed(2);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Object} filterObj\r\n     * @param {String} filterObj.search\r\n     * @param {Object} filterObj.wealth\r\n     * @param {Number} filterObj.wealth.min\r\n     * @param {Number} filterObj.wealth.max - Use infinite max if negative number\r\n     * @param {Object} filterObj.sex\r\n     * @param {Boolean} filterObj.sex.male\r\n     * @param {Boolean} filterObj.sex.female\r\n     * @param {Object} filterObj.age\r\n     * @param {Number} filterObj.age.min\r\n     * @param {Number} filterObj.age.max - Use infinite max if negative number\r\n     * @param {String[]} filterObj.countries - Array of countries to include, empty array includes all\r\n     *\r\n     */\r\n    static getfilteredPeople(filterObj) {\r\n        return this.cache.filter(person => {\r\n            // Wealth\r\n            if (filterObj.wealth && filterObj.wealth.min > 0 && filterObj.wealth.max >= 0) {\r\n                if (person.worth >= filterObj.wealth.min && person.worth <= filterObj.wealth.max)\r\n                    return true;\r\n            }\r\n\r\n            // Sex\r\n            if (filterObj.gender) {\r\n                if (filterObj.gender.male && filterObj.gender.female)\r\n                    return true;\r\n                if (filterObj.gender.male && person.gender === 'male')\r\n                    return true;\r\n                else if (filterObj.gender.female && person.gender === 'female')\r\n                    return true;\r\n            }\r\n\r\n            // Age\r\n            // Countries\r\n\r\n            // Search\r\n            if (filterObj.search && person.containsSearchTerm(filterObj.search))\r\n                return true;\r\n\r\n            return false;\r\n        });\r\n    }\r\n}\r\n\r\nexport default RichPerson;","\r\n//export const ADD_USER = 'ADD_USER';\r\n\r\n//export function addUser(user) {\r\n//    return {\r\n//        type: 'ADD_USER',\r\n//        user // action payload\r\n//    };\r\n//}\r\n\r\n/**\r\n * \r\n * @param {RichPerson} person - RichPerson object reference\r\n * @param {Boolean} isFirst - If true, change first person, else change second\r\n */\r\nexport function changePerson(person, isFirst) {\r\n    return {\r\n        type: `CHANGE_${isFirst ? 'FIRST' : 'SECOND'}_PERSON`,\r\n        person\r\n    };\r\n}\r\n\r\n/**\r\n * \r\n * @param {Number} amount - Amount to change to\r\n * @param {Boolean} isFirst - If true, change first person amount, else change second amount\r\n */\r\nexport function changeAmount(amount, isFirst) {\r\n    return {\r\n        type: `CHANGE_${isFirst ? 'FIRST' : 'SECOND'}_AMOUNT`,\r\n        amount\r\n    };\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changePerson } from '../redux/actions.js';\r\nimport RichPerson from '../classes/RichPerson.js';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Boolean} props.isFirst\r\n */\r\nfunction PersonSelectComponent(props) {\r\n    const selectedPerson = useSelector(state => props.isFirst ? state.first.person : state.second.person);\r\n    const dispatch = useDispatch();\r\n\r\n    const personSelectOptions = window.RichPerson.cache\r\n        .map((person, index) =>\r\n            <option\r\n                key={index}\r\n                value={person.id}\r\n            >\r\n                {person.name}\r\n            </option>\r\n        );\r\n\r\n    return (\r\n        <select\r\n            value={selectedPerson ? selectedPerson.id : \"\"}\r\n            onChange={(e) => dispatch(changePerson(RichPerson.getRichPersonById(e.target.value), props.isFirst))}\r\n        >\r\n            <option\r\n                name=\"person-select\"\r\n                value=\"\"\r\n            >\r\n                -- Select --\r\n            </option>\r\n            {personSelectOptions}\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default PersonSelectComponent;","import React from 'react';\r\nimport PersonSelectComponent from './PersonSelectComponent.js';\r\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeAmount } from '../redux/actions.js';\r\nimport './WealthSelector.css';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Boolean} props.isFirst\r\n */\r\nfunction WealthSelector(props) {\r\n    const selector = useSelector(state => props.isFirst ? state.first : state.second);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"wealth-selector\">\r\n            <label htmlFor=\"currency-amount\"></label>\r\n            <input\r\n                name=\"currency-amount\"\r\n                type=\"text\"\r\n                value={selector.amount ? selector.amount : \"\"}\r\n                placeholder=\"Enter amount\"\r\n                onChange={(e) => dispatch(changeAmount(e.target.value, props.isFirst))}\r\n            />\r\n            <PersonSelectComponent isFirst={props.isFirst} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WealthSelector;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronCircleUp, faChevronCircleDown, faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\nimport './DataArrayScroller.css';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {String[]} props.strArr - Array of strings to display in <p> components\r\n * @param {String} props.buttonEdge - 'top/down/left/right for edge of buttons\r\n */\r\nfunction DataArrayScroller(props) {\r\n    // States\r\n\r\n    const [indexDisplayed, setIndexDisplayed] = useState(0);\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Sets the index displayed by limiting number between 0-length of props.strArr\r\n     * @param {Number} num\r\n     */\r\n    function changeIndexDisplayed(num) {\r\n        // Return if NOT a number\r\n        if (isNaN(num)) return;\r\n\r\n        // limit num with modulo operator\r\n        num %= props.strArr.length;\r\n\r\n        // Adjust if negative\r\n        if (num < 0)\r\n            num += props.strArr.length;\r\n\r\n        // Set num between 0 and length of array\r\n        setIndexDisplayed(num);\r\n    }\r\n\r\n    // Variables\r\n\r\n    //const componentArr = (\r\n    //    <div>\r\n    //        {props.strArr.map((str, i) => <p>{`${i+1}. ${str}`}</p>)}\r\n    //    </div>\r\n    //);\r\n\r\n    const displayedDataComponent = (\r\n        (props.strArr.length > 1)\r\n            ? <p className=\"displayed-data\">{`${indexDisplayed + 1}/${props.strArr.length} | ${props.strArr[indexDisplayed]}`}</p>\r\n            : <p className=\"displayed-data\">{props.strArr[indexDisplayed]}</p>\r\n    );\r\n\r\n    const buttons = (\r\n        <div className=\"scroll-button-container\">\r\n            <button onClick={() => changeIndexDisplayed(indexDisplayed - 1)}>\r\n                <FontAwesomeIcon icon={faChevronUp} className=\"scroll-button-icon\" />\r\n            </button>\r\n            <button onClick={() => changeIndexDisplayed(indexDisplayed + 1)}>\r\n                <FontAwesomeIcon icon={faChevronDown} className=\"scroll-button-icon\" />\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={`data-array-scroller-container ${props.buttonEdge}`}>\r\n            {displayedDataComponent}\r\n            {props.strArr.length > 1 ? buttons : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataArrayScroller;","\r\n/**\r\n * \r\n * @param {Number|String} num\r\n * @returns {String}\r\n */\r\nexport function addCommasToNumber(num) {\r\n    // If num is number, convert to string\r\n    if (!isNaN(parseInt(num, 10)))\r\n        num = num.toString();\r\n    // If num is string and more than 3 digits\r\n    if (typeof num === 'string' && num.length > 3\r\n    ) {\r\n        // Add comma after every 3rd index from end\r\n        return num.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    } else // Else return the num as is\r\n        return num;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String[]} arr\r\n * @returns {String}\r\n */\r\nexport function listArrayAsString(stringArray) {\r\n    if (!stringArray) return null;\r\n\r\n    // Check if argument is an array\r\n    if (Array.isArray(stringArray)) {\r\n        let arrayItemText = '';\r\n        // Loop through each value of array\r\n        for (let index = 0, arrLength = stringArray.length; index < arrLength; index++) {\r\n            arrayItemText += stringArray[index];\r\n            // If array length is more than 1 and index is NOT the last element\r\n            // If array length is 2, only add ' and '\r\n            // Else: If index is second to last element, add ', and ' Else add ', '\r\n            if (arrLength > 1 && index !== arrLength - 1) {\r\n                arrayItemText += (arrLength === 2) ? ' and '\r\n                    : (index === arrLength - 2) ? ', and ' : ', ';\r\n            }\r\n        }\r\n        // Return created string\r\n        return arrayItemText;\r\n    }\r\n\r\n    // If argument is string, return the same string\r\n    if (typeof stringArray === 'string')\r\n        return stringArray;\r\n}\r\n\r\n/**\r\n * Sort callback function for Array sort method to sort alphabetically.\r\n * @param {String} firstStr\r\n * @param {String} secondStr\r\n * @returns {Number}\r\n */\r\nexport function sortTwoStringsAlphabetically(firstStr, secondStr) {\r\n    if (firstStr < secondStr) return -1;\r\n    if (firstStr > secondStr) return 1;\r\n    return 0; // strings must be equal\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport DataArrayScroller from './DataArrayScroller.js';\r\nimport { addCommasToNumber } from '../utilities.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { /*faUser,*/ faUserCircle, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './PersonNotesContainer.css';\r\n\r\n/**\r\n * \r\n * @param {RichPerson} person\r\n */\r\nfunction createUserImage(person) {\r\n    if (!person || !person.thumbnail)\r\n        return <FontAwesomeIcon icon={faUserCircle} className=\"thumbnail-image\" />\r\n\r\n    return <img src={person.thumbnail} alt={person.name} className=\"thumbnail-image\" />\r\n}\r\n\r\nfunction PersonNotesContainer() {\r\n    const firstPerson = useSelector(state => state.first.person);\r\n    const secondPerson = useSelector(state => state.second.person);\r\n\r\n    //const labels = (\r\n    //    <ul id=\"labels-container\">\r\n    //        <li>Name</li>\r\n    //        <li>Worth</li>\r\n    //        <li>Age</li>\r\n    //        <li>City</li>\r\n    //        <li>State</li>\r\n    //        <li>Country</li>\r\n    //    </ul>\r\n    //);\r\n\r\n    //const temp = (\r\n    //    <div id=\"person-notes-container\">\r\n    //        {firstPerson ? <PersonNotes person={firstPerson} /> : null}\r\n    //        {firstPerson || secondPerson ? labels : null}\r\n    //        {secondPerson ? <PersonNotes person={secondPerson} /> : null}\r\n    //    </div>\r\n    //);\r\n\r\n    function createPersonNotesTableRow(title, property) {\r\n        return (\r\n            <tr>\r\n                <td>{firstPerson && firstPerson[property]\r\n                    ? firstPerson[property]\r\n                    : \"---\"}\r\n                </td>\r\n                <th scope=\"row\">{title}</th>\r\n                <td>{secondPerson && secondPerson[property]\r\n                    ? secondPerson[property]\r\n                    : \"---\"}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    const newTable = (\r\n        <table id=\"person-notes-table\">\r\n            <caption>Information about each selected person or group.</caption>\r\n            <tbody>\r\n                {createPersonNotesTableRow(\"Name\", \"name\")}\r\n                <tr>\r\n                    <td>{firstPerson ? `$${addCommasToNumber(firstPerson.worth * 1000000)}` : \"---\"}</td>\r\n                    <th scope=\"row\">Worth</th>\r\n                    <td>{secondPerson ? `$${addCommasToNumber(secondPerson.worth * 1000000)}` : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.source : \"---\"}</td>\r\n                    <th scope=\"row\">Source</th>\r\n                    <td>{secondPerson ? secondPerson.source : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.age : \"---\"}</td>\r\n                    <th scope=\"row\">Age</th>\r\n                    <td>{secondPerson ? secondPerson.age : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.gender : \"---\"}</td>\r\n                    <th scope=\"row\">Gender</th>\r\n                    <td>{secondPerson ? secondPerson.gender : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.city : \"---\"}</td>\r\n                    <th scope=\"row\">City</th>\r\n                    <td>{secondPerson ? secondPerson.city : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.state : \"---\"}</td>\r\n                    <th scope=\"row\">State</th>\r\n                    <td>{secondPerson ? secondPerson.state : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.country : \"---\"}</td>\r\n                    <th scope=\"row\">Country</th>\r\n                    <td>{secondPerson ? secondPerson.country : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.bio\r\n                            ? <DataArrayScroller strArr={firstPerson.bio} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Bio</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.bio\r\n                            ? <DataArrayScroller strArr={secondPerson.bio} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.about\r\n                            ? <DataArrayScroller strArr={firstPerson.about} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">About</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.about\r\n                            ? <DataArrayScroller strArr={secondPerson.about} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson && firstPerson.industries\r\n                        ? firstPerson.industries\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Industries</th>\r\n                    <td>{secondPerson && secondPerson.industries\r\n                        ? secondPerson.industries\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson\r\n                        ? (firstPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : null)\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Self Made</th>\r\n                    <td>{secondPerson\r\n                        ? (secondPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : null)\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson && firstPerson.selfMadeRank\r\n                        ? firstPerson.selfMadeRank\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Self Made Rank</th>\r\n                    <td>{secondPerson && secondPerson.selfMadeRank\r\n                        ? secondPerson.selfMadeRank\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson && firstPerson.philanthropyScore\r\n                        ? firstPerson.philanthropyScore\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Philanthropy Score</th>\r\n                    <td>{secondPerson && secondPerson.philanthropyScore\r\n                        ? secondPerson.philanthropyScore\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    const table = (\r\n        <table id=\"person-notes-table\">\r\n            <caption>Information about each selected person or group.</caption>\r\n            <tbody>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.name : \"---\"}</span></td>\r\n                    <th scope=\"row\">Name</th>\r\n                    <td><span>{secondPerson ? secondPerson.name : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? `$${addCommasToNumber(firstPerson.worth * 1000000)}` : \"---\"}</span></td>\r\n                    <th scope=\"row\">Worth</th>\r\n                    <td><span>{secondPerson ? `$${addCommasToNumber(secondPerson.worth * 1000000)}` : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.source : \"---\"}</span></td>\r\n                    <th scope=\"row\">Source</th>\r\n                    <td><span>{secondPerson ? secondPerson.source : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.age : \"---\"}</span></td>\r\n                    <th scope=\"row\">Age</th>\r\n                    <td><span>{secondPerson ? secondPerson.age : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.gender : \"---\"}</span></td>\r\n                    <th scope=\"row\">Gender</th>\r\n                    <td><span>{secondPerson ? secondPerson.gender : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.city : \"---\"}</span></td>\r\n                    <th scope=\"row\">City</th>\r\n                    <td><span>{secondPerson ? secondPerson.city : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.state : \"---\"}</span></td>\r\n                    <th scope=\"row\">State</th>\r\n                    <td><span>{secondPerson ? secondPerson.state : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.country : \"---\"}</span></td>\r\n                    <th scope=\"row\">Country</th>\r\n                    <td><span>{secondPerson ? secondPerson.country : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.bio\r\n                            ? <DataArrayScroller strArr={firstPerson.bio} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Bio</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.bio\r\n                            ? <DataArrayScroller strArr={secondPerson.bio} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.about\r\n                            ? <DataArrayScroller strArr={firstPerson.about} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">About</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.about\r\n                            ? <DataArrayScroller strArr={secondPerson.about} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson && firstPerson.industries\r\n                                ? firstPerson.industries\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Industries</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson && secondPerson.industries\r\n                                ? secondPerson.industries\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson\r\n                                ? (firstPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : <FontAwesomeIcon icon={faTimes} />)\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Self Made</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson\r\n                                ? (secondPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : <FontAwesomeIcon icon={faTimes} />)\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson && firstPerson.selfMadeRank\r\n                                ? firstPerson.selfMadeRank\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Self Made Rank</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson && secondPerson.selfMadeRank\r\n                                ? secondPerson.selfMadeRank\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson && firstPerson.philanthropyScore\r\n                                ? firstPerson.philanthropyScore\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Philanthropy Score</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson && secondPerson.philanthropyScore\r\n                                ? secondPerson.philanthropyScore\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"thumbnail-container\">\r\n                {createUserImage(firstPerson)}\r\n                {createUserImage(secondPerson)}\r\n            </div>\r\n            {table}\r\n        </React.Fragment>    \r\n        );\r\n    }\r\n    \r\nexport default PersonNotesContainer;","import React from 'react';\r\nimport './MinMaxRangeSlider.css';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Number} props.min\r\n * @param {Number} props.max\r\n * @param {Number} props.step\r\n * @param {Number} props.initialLow\r\n * @param {Number} props.initialHigh\r\n */\r\nfunction MinMaxRangeSlider(props) {\r\n    function onStart(e) {\r\n        if (!e.target.classList.contains('slider-ball')) return;\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-max-range-slider\">\r\n            <select name=\"slider-min\" className=\"slider-min-control\">\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n            </select>\r\n            <select name=\"slider-max\" className=\"slider-max-control\">\r\n                <option value=\"1\">1</option>\r\n                <option value=\"2\">2</option>\r\n                <option value=\"3\">3</option>\r\n                <option value=\"4\">4</option>\r\n            </select>\r\n            <div className=\"slider-target\">\r\n                <div className=\"slider\" data-min=\"\" data-max=\"\">\r\n                    <div className=\"slider-bar\">\r\n                        <span className=\"slider-ball-min\"></span>\r\n                        <span className=\"slider-ball-max\"></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MinMaxRangeSlider;","import React, { useReducer, useEffect } from 'react';\r\nimport MinMaxRangeSlider from './MinMaxRangeSlider.js';\r\nimport RichPerson from '../classes/RichPerson.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWindowClose, faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport './PersonSelectorPopup.css';\r\n\r\n/**\r\n * Returns new RichPerson[] after filtering with filterObj parameter.\r\n * @param {Object} filterObj\r\n * @param {String} filterObj.search\r\n * @param {String} filterObj.search\r\n * @returns {RichPerson[]}\r\n */\r\nfunction filterDisplayedPeople(filterObj) {\r\n    let newDisplayedPeople = RichPerson.cache.slice();\r\n    // \r\n}\r\n\r\n/**\r\n * Sorts RichPerson array in-place with sortObj parameter\r\n * @param {RichPerson[]} displayedPeople\r\n * @param {Object} sortObj\r\n */\r\nfunction sortDisplayedPeople(displayedPeople, sortObj) {\r\n    // If sort type is 'none', return\r\n    if (sortObj.type === 'none') return;\r\n\r\n    // Sort in ascending order\r\n    displayedPeople.sort((first, second) => {\r\n        switch (sortObj.type) {\r\n            // Age\r\n            case 'age':\r\n                return first.age - second.age;\r\n\r\n            // Alphabetical\r\n            case 'first-name':\r\n                return sortTwoStringsAlphabetically(\r\n                    first.firstName.toUpperCase(), second.firstName.toUpperCase()\r\n                );\r\n\r\n            case 'last-name':\r\n                return sortTwoStringsAlphabetically(\r\n                    first.lastName.toUpperCase(), second.lastName.toUpperCase()\r\n                );\r\n\r\n            // Worth\r\n            case 'worth':\r\n                return first.worth - second.worth;\r\n\r\n            default:\r\n                return 0;\r\n        }\r\n    });\r\n\r\n    // Reverse array if isAscending is false\r\n    if (!sortObj.isAscending)\r\n        displayedPeople.reverse();\r\n}\r\n\r\n/**\r\n * Sort callback function for Array sort method to sort alphabetically.\r\n * @param {String} firstStr\r\n * @param {String} secondStr\r\n * @returns {Number}\r\n */\r\nfunction sortTwoStringsAlphabetically(firstStr, secondStr) {\r\n    if (firstStr < secondStr) return -1;\r\n    if (firstStr > secondStr) return 1;\r\n    return 0; // strings must be equal\r\n}\r\n\r\nconst initialState = {\r\n    'displayedPeople': RichPerson.cache,\r\n    'sort': {\r\n        'isAscending': false,\r\n        'type': 'worth',\r\n    },\r\n    'filter': {\r\n        'search': \"\",\r\n        'sex': \"both\",\r\n        'wealth': {\r\n            'min': 0,\r\n            'max': 1000000000000, // one trillion dollars\r\n        },\r\n        'age': {\r\n            'min': 0,\r\n            'max': 100,\r\n        },\r\n        'countries': 'all',\r\n    },\r\n};\r\n\r\nfunction reducer(prevState, action) {\r\n    switch (action.type) {\r\n        case 'sortByType':\r\n            let newDisplayedPeople = prevState.displayedPeople.slice();\r\n            let newSortObj = { ...prevState.sort, 'type': action.value };\r\n            sortDisplayedPeople(newDisplayedPeople, newSortObj);\r\n            return {\r\n                ...prevState,\r\n                'displayedPeople': newDisplayedPeople,\r\n                'sort': newSortObj\r\n            };\r\n        case 'sortByDirection':\r\n            if (prevState.sort.isAscending === action.value)\r\n                return prevState;\r\n            return {\r\n                ...prevState,\r\n                'displayedPeople': prevState.displayedPeople.slice().reverse(),\r\n                'sort': {\r\n                    ...prevState.sort,\r\n                    'isAscending': !prevState.sort.isAscending\r\n                }\r\n            };\r\n        case 'search':\r\n        case 'filter':\r\n            break;\r\n        case 'reset':\r\n            break;\r\n        default:\r\n            return prevState;\r\n    }\r\n}\r\n\r\n/**\r\n * React component popup box to sort/filter/search list of people before selecting one\r\n * @param {Object} props\r\n * @param {Function} props.setSelectedPerson - Function to set selected person\r\n * @param {Function} props.setIsPersonSelectorPopupOpen - Function to set bool whether to display popup box\r\n */\r\nfunction PersonSelectorPopup(props) {\r\n    // Reducer\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    // Functions\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    // Variables\r\n\r\n    const displayedPeopleElements = state.displayedPeople\r\n        .map(person =>\r\n            <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                <span>{person.name}</span>\r\n            </div>\r\n        );\r\n\r\n    return (\r\n        <div id=\"person-selector-popup\">\r\n            <div className=\"person-selector-popup-content\">\r\n                <div className=\"person-selector-popup-top-bar\">\r\n                    <div className=\"top-bar-title\">Select Person To Compare</div>\r\n                    <span\r\n                        className=\"close\"\r\n                        onClick={() => props.setIsPersonSelectorPopupOpen(false)}\r\n                    >\r\n                        <FontAwesomeIcon icon={faWindowClose} />\r\n                    </span>\r\n                </div>\r\n                <div className=\"search-container\">\r\n                    <form>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search...\"\r\n                            name=\"search\"\r\n                        />\r\n                        <button type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSearch} />\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"filter-sort-displayed-container\">\r\n                    <div className=\"filter-container\">\r\n                        Filter\r\n                        <MinMaxRangeSlider />\r\n                    </div>\r\n                    <div className=\"sort-and-displayed-container\">\r\n                        <div className=\"sort-container\">\r\n                            <label htmlFor=\"sort-type-select\">\r\n                                {\"Sort: \"}\r\n                                <select\r\n                                    name=\"sort-type\"\r\n                                    id=\"sort-type-select\"\r\n                                    value={state.sort.type}\r\n                                    onChange={(e) => {\r\n                                        dispatch({ 'type': 'sortByType', 'value': e.target.value, });\r\n                                    }}\r\n                                >\r\n                                    <option value=\"none\">-- Sort By --</option>\r\n                                    <option value=\"worth\">Worth</option>\r\n                                    <option value=\"age\">Age</option>\r\n                                    <option value=\"first-name\">First Name</option>\r\n                                    <option value=\"last-name\">Last Name</option>\r\n                                </select>\r\n                            </label>\r\n\r\n                            <label htmlFor=\"sort-direction-select\">\r\n                                {\"Direction: \"}\r\n                                <select\r\n                                    name=\"sort-direction\"\r\n                                    id=\"sort-direction-select\"\r\n                                    value={state.sort.isAscending ? \"ascending\" : \"descending\"}\r\n                                    onChange={(e) => {\r\n                                        dispatch({ 'type': 'sortByDirection', 'value': (e.target.value === \"ascending\") });\r\n                                    }}\r\n                                >\r\n                                    <option value=\"descending\">Descending</option>\r\n                                    <option value=\"ascending\">Ascending</option>\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"displayed-people-container\">\r\n                            <div className=\"displayed-people-list\">\r\n                                {displayedPeopleElements}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonSelectorPopup;","import React from 'react';\r\nimport './FooterCustom.css';\r\n\r\nfunction FooterCustom() {\r\n    function getCopyrightString() {\r\n        const currentYear = new Date().getFullYear();\r\n        return currentYear === 2021\r\n            ? 2021\r\n            : `2021-${currentYear}`;\r\n    }\r\n\r\n    return (\r\n        <footer className=\"App-footer\">\r\n            <p>\r\n                <small>\r\n                    Source Code &copy; <time id=\"copyright-current-year\">{getCopyrightString()}</time> Todd Brentlinger, Santa Cruz, CA, USA. All Rights Reserved.\r\n                </small>\r\n            </p>\r\n            <p>\r\n                <small>\r\n                    Last modified on <time id=\"lastModifiedDate\"></time>\r\n                </small>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default FooterCustom;","import React, { useState, useEffect } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport RichPerson from './classes/RichPerson.js';\r\nimport WealthSelector from './components/WealthSelector.js';\r\nimport PersonNotesContainer from './components/PersonNotesContainer.js';\r\nimport PersonSelectorPopup from './components/PersonSelectorPopup.js';\r\nimport FooterCustom from './components/FooterCustom.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changePerson, changeAmount } from './redux/actions.js';\r\nimport { addCommasToNumber } from './utilities.js';\r\n\r\n// Global variable to reference RichPerson cache\r\nwindow.RichPerson = RichPerson;\r\n\r\nfunction App() {\r\n    // States\r\n\r\n    //const [firstPerson, setFirstPerson] = useState(null);\r\n    //const [firstAmount, setFirstAmount] = useState(\"\");\r\n    //const [secondPerson, setSecondPerson] = useState(null);\r\n    //const [secondAmount, setSecondAmount] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [isPersonSelectorPopupOpen, setIsPersonSelectorPopupOpen] = useState(false);\r\n\r\n    // Variables\r\n\r\n    //const users = useSelector(state => state.users);\r\n    const first = useSelector(state => state.first);\r\n    const second = useSelector(state => state.second);\r\n    const dispatch = useDispatch();\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetch(\"forbesData.json\",\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                }\r\n            }\r\n        ).then((response) => response.json()\r\n        ).then((data) => {\r\n            data.personList.personsLists\r\n                .forEach(personData => new RichPerson(personData));\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    // TEMP\r\n    //useEffect(() => {\r\n    //    console.log(`First:\\nPerson: ${first.person ? first.person.name : null}\\nAmount: ${first.amount}`);\r\n    //    console.log(`Second:\\nPerson: ${second.person ? second.person.name: null}\\nAmount: ${second.amount}`);\r\n    //}, [first, second]);\r\n\r\n    // Functions\r\n\r\n    function getDisplayedAmount(amount) {\r\n        if (!amount) return 0;\r\n\r\n        amount = Number(amount);\r\n\r\n        if (amount <= 0) return 0;\r\n\r\n        return amount < 1000 ? amount : addCommasToNumber(amount.toFixed(0));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Boolean} isFirst\r\n     */\r\n    function handlePersonSelectButtonClick(isFirst = true) {\r\n        setIsPersonSelectorPopupOpen(true);\r\n\r\n    }\r\n\r\n    // Variables\r\n\r\n    const wealthComparisonContainer = (\r\n        <div id=\"wealth-comparison-container\">\r\n            <div className=\"person-container\">\r\n                <div>{`$${getDisplayedAmount(first.amount)}`}</div>\r\n                <WealthSelector isFirst={true} />\r\n                <button onClick={() => handlePersonSelectButtonClick(true)}>Change Person</button>\r\n            </div>\r\n            <div className=\"exchange-icon\">\r\n                <FontAwesomeIcon icon={faExchangeAlt} />\r\n            </div>\r\n            <div className=\"person-container\">\r\n                <div>{`$${getDisplayedAmount(second.amount)}`}</div>\r\n                <WealthSelector isFirst={false} />\r\n                <button onClick={() => handlePersonSelectButtonClick(false)}>Change Person</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    //const wealthSelectors = (\r\n    //    <div id=\"wealth-selector-container\">\r\n    //        <WealthSelector isFirst={true} />\r\n    //        <WealthSelector isFirst={false} />\r\n    //    </div>\r\n    //);\r\n\r\n    // TEMP:\r\n    const buttons = (\r\n        <div id=\"random-buttons\">\r\n            <button\r\n                onClick={\r\n                    () => dispatch(changePerson(getRandomPerson(), true))\r\n                }\r\n            >\r\n                Random First Person\r\n                </button>\r\n            <button\r\n                onClick={() => dispatch(changeAmount(getRandomAmount(), true))}\r\n            >\r\n                Random First Amount\r\n                </button>\r\n            <button\r\n                onClick={\r\n                    () => dispatch(changePerson(getRandomPerson(), false))\r\n                }\r\n            >\r\n                Random Second Person\r\n                </button>\r\n            <button\r\n                onClick={() => dispatch(changeAmount(getRandomAmount(), false))}\r\n            >\r\n                Random Second Amount\r\n                </button>\r\n        </div>\r\n    );\r\n\r\n    const mainApp = (\r\n        <main>\r\n            {isPersonSelectorPopupOpen\r\n                ? <PersonSelectorPopup setIsPersonSelectorPopupOpen={setIsPersonSelectorPopupOpen} />\r\n                : null}\r\n            {wealthComparisonContainer}\r\n            {first || second ? <PersonNotesContainer /> : null}\r\n        </main>\r\n    );\r\n\r\n    // Functions\r\n\r\n    function getRandomPerson() {\r\n        const index = Math.floor(Math.random() * RichPerson.cache.length);\r\n        return RichPerson.cache[index];\r\n    }\r\n\r\n    function getRandomAmount() {\r\n        return (Math.random() * 1000000).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Wealth Comparison</h1>\r\n            {buttons}\r\n            {isLoading ? null : mainApp}\r\n            {buttons}\r\n            <FooterCustom />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","\r\n//import { ADD_USER } from './actions.js';\r\n\r\n//function userDataReducer(state = { 'users': ['Test'] }, action) {\r\n//    switch (action.type) {\r\n//        case 'ADD_USER':\r\n//            return Object.assign({}, state, {\r\n//                'users': [...state.users, action.user]\r\n//            });\r\n//        default:\r\n//            return state;\r\n//    }\r\n//}\r\n\r\n//export default userDataReducer;\r\n\r\nimport RichPerson from '../classes/RichPerson.js';\r\n\r\nconst initialState = {\r\n    first: {\r\n        person: null,\r\n        amount: null,\r\n    },\r\n    second: {\r\n        person: null,\r\n        amount: null,\r\n    },\r\n    popupSelector: {\r\n        isDisplayed: false,\r\n        sort: {\r\n            type: 'wealth',\r\n            isAscending: false,\r\n        },\r\n        filter: {\r\n            search: \"\",\r\n            wealth: {\r\n                min: 0,\r\n                max: -1, // Use infinite max if negative number\r\n            },\r\n            gender: {\r\n                male: true,\r\n                female: true,\r\n            },\r\n            age: {\r\n                min: 0,\r\n                max: -1, // Use infinite max if negative number\r\n            },\r\n            countries: [], // show all countries if empty\r\n        },\r\n    },\r\n};\r\n\r\nfunction personDataReducer(state = initialState, action) {\r\n    let newState;\r\n    switch (action.type) {\r\n        case 'CHANGE_FIRST_PERSON':\r\n            newState = Object.assign({}, state, {\r\n                first: {\r\n                    ...state.first,\r\n                    person: action.person\r\n                }\r\n            });\r\n            if (action.person && state.second.person)\r\n                newState.first.amount = RichPerson.convertAmount(state.second.amount, state.second.person, action.person);\r\n            return newState;\r\n        case 'CHANGE_FIRST_AMOUNT':\r\n            newState = {\r\n                ...state,\r\n                first: {\r\n                    ...state.first,\r\n                    amount: action.amount\r\n                }\r\n            };\r\n            if (state.first.person && state.second.person)\r\n                newState.second.amount = RichPerson.convertAmount(action.amount, state.first.person, state.second.person);\r\n            return newState;\r\n        case 'CHANGE_SECOND_PERSON':\r\n            newState = Object.assign({}, state, {\r\n                second: {\r\n                    ...state.second,\r\n                    person: action.person\r\n                }\r\n            });\r\n            if (action.person && state.first.person)\r\n                newState.second.amount = RichPerson.convertAmount(state.first.amount, state.first.person, action.person);\r\n            return newState;\r\n        case 'CHANGE_SECOND_AMOUNT':\r\n            newState = {\r\n                ...state,\r\n                second: {\r\n                    ...state.second,\r\n                    amount: action.amount\r\n                }\r\n            };\r\n            if (state.first.person && state.second.person) {\r\n                newState.first.amount = RichPerson.convertAmount(action.amount, state.second.person, state.first.person);\r\n            }\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default personDataReducer;","\r\nimport { createStore } from 'redux';\r\nimport personDataReducer from './reducers.js';\r\n\r\nexport default createStore(personDataReducer);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
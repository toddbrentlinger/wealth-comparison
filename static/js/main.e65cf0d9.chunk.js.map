{"version":3,"sources":["classes/RichPerson.js","redux/actions.js","components/PersonSelectComponent.js","components/WealthSelector.js","components/DataArrayScroller.js","utilities.js","components/PersonNotesContainer.js","components/MinMaxRangeSlider.js","components/PersonSelectorPopup.js","images/bill_stack_alpha_800w.png","components/WealthDisplayCanvas.js","components/FooterCustom.js","components/ReduxStateDisplay.js","App.js","redux/reducers.js","redux/store.js","reportWebVitals.js","index.js"],"names":["RichPerson","jsonObj","this","bio","bios","about","abouts","employment","cache","push","personName","firstName","lastName","age","country","state","city","squareImage","startsWith","naturalId","finalWorth","gender","industries","source","organization","selfMadeRank","philanthropyScore","selfMade","searchTerm","obj","toLowerCase","includes","toString","Array","isArray","some","element","containsSearchTerm","from","Object","values","value","idSet","Set","forEach","person","has","id","console","log","add","i","length","amount","basePerson","convertedPerson","Number","isNaN","worth","toFixed","filterObj","filter","wealth","min","max","male","female","search","changePerson","isFirst","type","changeAmount","openPopupSelector","willChangeFirstPerson","changeFilterAge","isMin","changeFilterWorth","PersonSelectComponent","props","selectedPerson","useSelector","first","second","dispatch","useDispatch","personSelectOptions","window","map","index","name","onChange","e","getRichPersonById","target","WealthSelector","selector","className","htmlFor","placeholder","DataArrayScroller","useState","indexDisplayed","setIndexDisplayed","changeIndexDisplayed","num","strArr","displayedDataComponent","buttons","onClick","icon","faChevronUp","faChevronDown","buttonEdge","addCommasToNumber","parseInt","replace","sortTwoStringsAlphabetically","firstStr","secondStr","convertNumToSimplifiedString","pow","error","checkMouseCoords","event","pageX","clientX","eventDoc","ownerDocument","document","doc","documentElement","body","scrollLeft","clientLeft","pageY","clientY","scrollTop","clientTop","createUserImage","thumbnail","src","alt","faUserCircle","PersonNotesContainer","firstPerson","secondPerson","property","isSelfMade","faCheck","table","scope","faTimes","Fragment","getPercentageOfValueBetweenTwoValues","val","MinMaxRangeSlider","startingMin","minLimit","maxLimit","minValue","setMinValue","startingMax","maxValue","setMaxValue","slider","useRef","sliderBar","sliderBarStart","sliderBarEnd","resultsElement","startX","currentX","targetBCR","sliderBCR","sliderStartX","sliderEndX","isDraggingBall","onStart","current","getBoundingClientRect","left","right","touches","preventDefault","onMove","onMinChange","calculateValue","calculatePercentage","onMaxChange","onEnd","positionInSlider","width","convertPercentageToValueInRange","percentage","step","Math","round","getDisplayValueFromPercentage","useEffect","tempMinValue","tempMaxValue","style","updateSliderValues","title","onMouseMove","onMouseLeave","onTouchMove","ref","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","convertValueToDisplay","PersonSelectorPopup","popupSelector","displayedPeople","sortObj","sort","wealthFilter","ageFilter","displayedPeopleElements","handlePersonSelect","createPersonElement","personToSelect","closePopupSelector","faWindowClose","faSearch","isAscending","changeSortIsAscending","getNumberOfColumns","image","scale","deltaXRatio","canvasWidth","floor","distributeStacks","arr","n","start","end","addPerStack","newTotal","WealthDisplayCanvas","height","canvasSize","setCanvasSize","canvasContainerRef","canvasRef","ctx","billStackImg","Image","intervalRef","drawNStacks","nBillStacks","nextStackShifts","x","y","nColumns","stackCountsArr","fill","stackXPositionArr","scaledImageWidth","centerX","columnSetWidth","getStackXPositions","currY","canvas","drawImage","maxLevel","reduce","a","b","currentLevel","stackCount","columnIndex","draw","useCallback","clearInterval","clearRect","hidden","firstStackAmount","ceil","secondstackAmount","fullHeight","maxColumnSize","getHeightOfColumnSet","offsetWidth","getContext","offsetHeight","billStackImage","addEventListener","handleResize","removeEventListener","FooterCustom","currentYear","Date","getFullYear","getCopyrightString","PropertyDisplay","isValueShowing","setIsValueShowing","valueNode","entries","entry","keys","createPropertyNode","ReduxStateDisplay","reduxState","isOpen","setIsOpen","draggableNodeRef","mouseRelativePosition","handleMouseMove","top","handleMouseUp","clickDragRect","once","App","isLoading","setIsLoading","selectorModal","getDisplayedAmount","handlePersonSelectButtonClick","fetch","headers","then","response","json","data","personList","personsLists","personData","wealthComparisonContainer","faExchangeAlt","getRandomPerson","getRandomAmount","mainApp","isDisplayed","random","initialState","countries","filterDisplayedPeople","sortDisplayedPeople","toUpperCase","reverse","personDataReducer","newState","newDisplayedPeople","action","assign","convertAmount","slice","createStore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","store","getElementById"],"mappings":"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","file":"static/js/main.e65cf0d9.chunk.js","sourcesContent":["// TODO: Create base Person class to be extended \r\n// for similar functionality with RichPerson\r\nclass RichPerson {\r\n    constructor(jsonObj) {\r\n        this.jsonObj = jsonObj;\r\n\r\n        // Properties that are copied by reference.\r\n        // Use getters for primitive type properties that are copied by value\r\n        this.bio = jsonObj.bios;\r\n        this.about = jsonObj.abouts;\r\n        this.employment = jsonObj.employment;\r\n\r\n        // Add to static cache\r\n        RichPerson.cache.push(this);\r\n    }\r\n\r\n    // -----------------------------\r\n    // ---------- Getters ----------\r\n    // -----------------------------\r\n\r\n    // Use getters to reference JSON obj properties that are primitive\r\n    // types and would normally be copied by value, NOT reference\r\n    get name() { return this.jsonObj.personName; }\r\n    get firstName() { return this.jsonObj.firstName; }\r\n    get lastName() { return this.jsonObj.lastName; }\r\n    get age() { return this.jsonObj.age; }\r\n    get country() { return this.jsonObj.country; }\r\n    get state() { return this.jsonObj.state; }\r\n    get city() { return this.jsonObj.city; }\r\n    get thumbnail() {\r\n        if (!this.jsonObj.squareImage)\r\n            return null;\r\n        if (this.jsonObj.squareImage.startsWith('http'))\r\n            return this.jsonObj.squareImage;\r\n        else\r\n            return `https:${this.jsonObj.squareImage}`;\r\n    }\r\n    get id() { return this.jsonObj.naturalId; }\r\n    get worth() { return this.jsonObj.finalWorth; }\r\n    get gender() {\r\n        switch (this.jsonObj.gender) {\r\n            case 'M':\r\n                return 'Male';\r\n            case 'F':\r\n                return 'Female';\r\n            default:\r\n                return 'Other';\r\n        }\r\n    }\r\n    get industries() { return this.jsonObj.industries[0]; }\r\n    get source() { return this.jsonObj.source; }\r\n    get organization() { return this.jsonObj.organization; }\r\n    get selfMadeRank() { return this.jsonObj.selfMadeRank; }\r\n    get philanthropyScore() { return this.jsonObj.philanthropyScore; }\r\n    get isSelfMade() { return this.jsonObj.selfMade; }\r\n\r\n    // ------------------------------------\r\n    // ---------- Public Methods ----------\r\n    // ------------------------------------\r\n\r\n    /**\r\n     * Recursive function to search each property of class instance.\r\n     * @param {String} searchTerm\r\n     * @param {any} obj\r\n     * @returns {Boolean}\r\n     */\r\n    containsSearchTerm(searchTerm, obj = this) {\r\n        // String\r\n        if (typeof obj === 'string') {\r\n            return obj.toLowerCase().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Number\r\n        if (typeof obj === 'number') {\r\n            return obj.toString().includes(searchTerm.toLowerCase());\r\n        }\r\n        // Array\r\n        if (Array.isArray(obj)) {\r\n            return obj.some(element => this.containsSearchTerm(searchTerm, element));\r\n        }\r\n        // Object\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            return Array.from(Object.values(obj))\r\n                .some(value => this.containsSearchTerm(searchTerm, value));\r\n        }\r\n        // Other\r\n        return false;\r\n    }\r\n\r\n    // ---------------------------------------\r\n    // ---------- Static Properties ----------\r\n    // ---------------------------------------\r\n\r\n    static cache = [];\r\n\r\n    // ------------------------------------\r\n    // ---------- Static Methods ----------\r\n    // ------------------------------------\r\n\r\n    static checkForUniqueIds() {\r\n        let idSet = new Set();\r\n\r\n        this.cache.forEach(person => {\r\n            // If ID already in set, display error in console\r\n            if (idSet.has(person.id))\r\n                console.log(`ID: ${person.id} appears multiple times!`);\r\n            // Else add person to set\r\n            else\r\n                idSet.add(person.id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {String} id\r\n     */\r\n    static getRichPersonById(id) {\r\n        for (let i = 0; i < this.cache.length; i++) {\r\n            if (this.cache[i].id === id)\r\n                return this.cache[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns equivalent amount of convertedPerson compared to basePerson\r\n     * @param {Number} amount\r\n     * @param {RichPerson} basePerson\r\n     * @param {RichPerson} convertedPerson\r\n     */\r\n    static convertAmount(amount, basePerson, convertedPerson) {\r\n        if (!amount) return 0;\r\n\r\n        // Convert to number\r\n        amount = Number(amount);\r\n        if (isNaN(amount)) return 0;\r\n\r\n        return (amount * convertedPerson.worth / basePerson.worth).toFixed(2);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Object} filterObj\r\n     * @param {String} filterObj.search\r\n     * @param {Object} filterObj.wealth\r\n     * @param {Number} filterObj.wealth.min\r\n     * @param {Number} filterObj.wealth.max - Use infinite max if negative number\r\n     * @param {Object} filterObj.sex\r\n     * @param {Boolean} filterObj.sex.male\r\n     * @param {Boolean} filterObj.sex.female\r\n     * @param {Object} filterObj.age\r\n     * @param {Number} filterObj.age.min\r\n     * @param {Number} filterObj.age.max - Use infinite max if negative number\r\n     * @param {String[]} filterObj.countries - Array of countries to include, empty array includes all\r\n     *\r\n     */\r\n    static getfilteredPeople(filterObj) {\r\n        return this.cache.filter(person => {\r\n            // Wealth\r\n            if (filterObj.wealth && filterObj.wealth.min > 0 && filterObj.wealth.max >= 0) {\r\n                if (person.worth >= filterObj.wealth.min && person.worth <= filterObj.wealth.max)\r\n                    return true;\r\n            }\r\n\r\n            // Sex\r\n            if (filterObj.gender) {\r\n                if (filterObj.gender.male && filterObj.gender.female)\r\n                    return true;\r\n                if (filterObj.gender.male && person.gender === 'male')\r\n                    return true;\r\n                else if (filterObj.gender.female && person.gender === 'female')\r\n                    return true;\r\n            }\r\n\r\n            // Age\r\n            // Countries\r\n\r\n            // Search\r\n            if (filterObj.search && person.containsSearchTerm(filterObj.search))\r\n                return true;\r\n\r\n            return false;\r\n        });\r\n    }\r\n}\r\n\r\nexport default RichPerson;","\r\n//export const ADD_USER = 'ADD_USER';\r\n\r\n//export function addUser(user) {\r\n//    return {\r\n//        type: 'ADD_USER',\r\n//        user // action payload\r\n//    };\r\n//}\r\n\r\n/**\r\n * \r\n * @param {RichPerson} person - RichPerson object reference\r\n * @param {Boolean} isFirst - If true, change first person, else change second\r\n */\r\nexport function changePerson(person, isFirst) {\r\n    return {\r\n        type: `CHANGE_${isFirst ? 'FIRST' : 'SECOND'}_PERSON`,\r\n        person\r\n    };\r\n}\r\n\r\n/**\r\n * \r\n * @param {Number} amount - Amount to change to\r\n * @param {Boolean} isFirst - If true, change first person amount, else change second amount\r\n */\r\nexport function changeAmount(amount, isFirst) {\r\n    return {\r\n        type: `CHANGE_${isFirst ? 'FIRST' : 'SECOND'}_AMOUNT`,\r\n        amount\r\n    };\r\n}\r\n\r\n// --------------------------------------------------\r\n// ---------- Popup Selector - isDisplayed ----------\r\n// --------------------------------------------------\r\n\r\n// NOT NEEDED\r\n//export function changePopupSelectorIsDisplayed(value, willChangeFirstPerson = true) {\r\n//    return {\r\n//        type: 'CHANGE_POPUP_SELECTOR_IS_DISPLAYED',\r\n//        value: {isDisplayed: value, willChangeFirstPerson}\r\n//    };\r\n//}\r\n\r\nexport function openPopupSelector(willChangeFirstPerson = true) {\r\n    return {\r\n        type: 'OPEN_POPUP_SELECTOR',\r\n        willChangeFirstPerson\r\n    };\r\n}\r\n\r\nexport function closePopupSelector(personToSelect = null) {\r\n    return {\r\n        type: 'CLOSE_POPUP_SELECTOR',\r\n        personToSelect\r\n    };\r\n}\r\n\r\n// --------------------------\r\n// ---------- SORT ----------\r\n// --------------------------\r\n\r\n/**\r\n * \r\n * @param {String} value\r\n */\r\nexport function changeSortType(value) {\r\n    return {\r\n        type: `CHANGE_SORT_TYPE`,\r\n        value\r\n    };\r\n}\r\n\r\n/**\r\n * \r\n * @param {Boolean} isAscending\r\n */\r\nexport function changeSortIsAscending(isAscending = false) {\r\n    return {\r\n        type: `CHANGE_SORT_DIRECTION`,\r\n        value: isAscending\r\n    };\r\n}\r\n\r\n// ----------------------------\r\n// ---------- FILTER ----------\r\n// ----------------------------\r\n\r\n/**\r\n * \r\n * @param {Number} value\r\n * @param {Boolean} isMin\r\n */\r\nexport function changeFilterAge(value, isMin) {\r\n    return {\r\n        type: `CHANGE_FILTER_${isMin ? 'MIN' : 'MAX'}_AGE`,\r\n        value\r\n    };\r\n}\r\n\r\n/**\r\n * \r\n * @param {Number} amount\r\n * @param {Boolean} isMin\r\n */\r\nexport function changeFilterWorth(amount, isMin) {\r\n    return {\r\n        type: `CHANGE_FILTER_${isMin ? 'MIN' : 'MAX'}_WORTH`,\r\n        amount\r\n    };\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changePerson } from '../redux/actions.js';\r\nimport RichPerson from '../classes/RichPerson.js';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Boolean} props.isFirst\r\n */\r\nfunction PersonSelectComponent(props) {\r\n    const selectedPerson = useSelector(state => props.isFirst ? state.first.person : state.second.person);\r\n    const dispatch = useDispatch();\r\n\r\n    const personSelectOptions = window.RichPerson.cache\r\n        .map((person, index) =>\r\n            <option\r\n                key={index}\r\n                value={person.id}\r\n            >\r\n                {person.name}\r\n            </option>\r\n        );\r\n\r\n    return (\r\n        <select\r\n            value={selectedPerson ? selectedPerson.id : \"\"}\r\n            onChange={(e) => dispatch(changePerson(RichPerson.getRichPersonById(e.target.value), props.isFirst))}\r\n        >\r\n            <option\r\n                name=\"person-select\"\r\n                value=\"\"\r\n            >\r\n                -- Select --\r\n            </option>\r\n            {personSelectOptions}\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default PersonSelectComponent;","import React from 'react';\r\nimport PersonSelectComponent from './PersonSelectComponent.js';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeAmount } from '../redux/actions.js';\r\nimport './WealthSelector.css';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Boolean} props.isFirst\r\n */\r\nfunction WealthSelector(props) {\r\n    const selector = useSelector(state => props.isFirst ? state.first : state.second);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"wealth-selector\">\r\n            <label htmlFor=\"currency-amount\"></label>\r\n            <input\r\n                name=\"currency-amount\"\r\n                type=\"text\"\r\n                value={selector.amount ? selector.amount : \"\"}\r\n                placeholder=\"Enter amount\"\r\n                onChange={(e) => dispatch(changeAmount(e.target.value, props.isFirst))}\r\n            />\r\n            <PersonSelectComponent isFirst={props.isFirst} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WealthSelector;","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { /*faChevronCircleUp, faChevronCircleDown,*/ faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\nimport './DataArrayScroller.css';\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {String[]} props.strArr - Array of strings to display in <p> components\r\n * @param {String} props.buttonEdge - 'top/down/left/right for edge of buttons\r\n */\r\nfunction DataArrayScroller(props) {\r\n    // States\r\n\r\n    const [indexDisplayed, setIndexDisplayed] = useState(0);\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * Sets the index displayed by limiting number between 0-length of props.strArr\r\n     * @param {Number} num\r\n     */\r\n    function changeIndexDisplayed(num) {\r\n        // Return if NOT a number\r\n        if (isNaN(num)) return;\r\n\r\n        // limit num with modulo operator\r\n        num %= props.strArr.length;\r\n\r\n        // Adjust if negative\r\n        if (num < 0)\r\n            num += props.strArr.length;\r\n\r\n        // Set num between 0 and length of array\r\n        setIndexDisplayed(num);\r\n    }\r\n\r\n    // Variables\r\n\r\n    //const componentArr = (\r\n    //    <div>\r\n    //        {props.strArr.map((str, i) => <p>{`${i+1}. ${str}`}</p>)}\r\n    //    </div>\r\n    //);\r\n\r\n    const displayedDataComponent = (\r\n        (props.strArr.length > 1)\r\n            ? <p className=\"displayed-data\">{`${indexDisplayed + 1}/${props.strArr.length} | ${props.strArr[indexDisplayed]}`}</p>\r\n            : <p className=\"displayed-data\">{props.strArr[indexDisplayed]}</p>\r\n    );\r\n\r\n    const buttons = (\r\n        <div className=\"scroll-button-container\">\r\n            <button onClick={() => changeIndexDisplayed(indexDisplayed - 1)}>\r\n                <FontAwesomeIcon icon={faChevronUp} className=\"scroll-button-icon\" />\r\n            </button>\r\n            <button onClick={() => changeIndexDisplayed(indexDisplayed + 1)}>\r\n                <FontAwesomeIcon icon={faChevronDown} className=\"scroll-button-icon\" />\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className={`data-array-scroller-container ${props.buttonEdge}`}>\r\n            {displayedDataComponent}\r\n            {props.strArr.length > 1 ? buttons : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DataArrayScroller;","\r\n/**\r\n * \r\n * @param {Number|String} num\r\n * @returns {String}\r\n */\r\nexport function addCommasToNumber(num) {\r\n    // If num is number, convert to string\r\n    if (!isNaN(parseInt(num, 10)))\r\n        num = num.toString();\r\n    // If num is string and more than 3 digits\r\n    if (typeof num === 'string' && num.length > 3\r\n    ) {\r\n        // Add comma after every 3rd index from end\r\n        return num.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    } else // Else return the num as is\r\n        return num;\r\n}\r\n\r\n/**\r\n * \r\n * @param {String[]} arr\r\n * @returns {String}\r\n */\r\nexport function listArrayAsString(stringArray) {\r\n    if (!stringArray) return null;\r\n\r\n    // Check if argument is an array\r\n    if (Array.isArray(stringArray)) {\r\n        let arrayItemText = '';\r\n        // Loop through each value of array\r\n        for (let index = 0, arrLength = stringArray.length; index < arrLength; index++) {\r\n            arrayItemText += stringArray[index];\r\n            // If array length is more than 1 and index is NOT the last element\r\n            // If array length is 2, only add ' and '\r\n            // Else: If index is second to last element, add ', and ' Else add ', '\r\n            if (arrLength > 1 && index !== arrLength - 1) {\r\n                arrayItemText += (arrLength === 2) ? ' and '\r\n                    : (index === arrLength - 2) ? ', and ' : ', ';\r\n            }\r\n        }\r\n        // Return created string\r\n        return arrayItemText;\r\n    }\r\n\r\n    // If argument is string, return the same string\r\n    if (typeof stringArray === 'string')\r\n        return stringArray;\r\n}\r\n\r\n/**\r\n * Sort callback function for Array sort method to sort alphabetically.\r\n * @param {String} firstStr\r\n * @param {String} secondStr\r\n * @returns {Number}\r\n */\r\nexport function sortTwoStringsAlphabetically(firstStr, secondStr) {\r\n    if (firstStr < secondStr) return -1;\r\n    if (firstStr > secondStr) return 1;\r\n    return 0; // strings must be equal\r\n}\r\n\r\n/**\r\n * Converts number to simplified string of number with letter at the end.\r\n * @param {Number} num\r\n * @returns {String}\r\n */\r\nexport function convertNumToSimplifiedString(num) {\r\n    if (Number.isNaN(num)) { // if num is Not A Number\r\n        num = Number(num); // try to convert parameter to Number\r\n        if (Number.isNaN(num)) { // if num is still Not A Number\r\n            console.error(`Parameter is NOT a number.`);\r\n            return;\r\n        }\r\n    }\r\n\r\n    if (num < 1000)\r\n        return num.toString();\r\n\r\n    // If reach here, num is more than or equal to 1,000\r\n\r\n    let pow = 0;\r\n    while (num >= 1000 && pow < 15) {\r\n        pow += 3;\r\n        num /= 1000;\r\n    }\r\n\r\n    // Remove any fractional part of num\r\n    num = num.toFixed(0);\r\n\r\n    /*\r\n    switch (pow) {\r\n        case 0: return num.toString(); // Case should be unreachable\r\n        case 3: return num + 'K';\r\n        case 6: return num + 'M';\r\n        case 9: return num + 'B';\r\n        case 12: return num + 'T';\r\n        case 15: return num + 'Q';\r\n        default: return num.toString();\r\n    }\r\n    */\r\n    // Alternate to switch to consider all possible pow values\r\n    if (pow < 3) return num.toString();\r\n    if (pow < 6) return num + 'K';\r\n    if (pow < 9) return num + 'M';\r\n    if (pow < 12) return num + 'B';\r\n    if (pow < 15) return num + 'T';\r\n    // If reach here, pow is 15 or more\r\n    return num + 'Q';\r\n}\r\n\r\n/**\r\n * Clamps val between min and max\r\n * @param {Number} val\r\n * @param {Number} min\r\n * @param {Number} max\r\n */\r\nexport function clampValue(val, min, max) {\r\n    if (val < min) return min;\r\n    if (val > max) return max;\r\n    return val;\r\n}\r\n\r\n/**\r\n * \r\n * @param {MouseEvent} event\r\n */\r\nexport function checkMouseCoords(event) {\r\n    event = event || window.event; // IE-ism\r\n\r\n    // If pageX/Y aren't available and clientX/Y are,\r\n    // calculate pageX/Y - logic taken from jQuery.\r\n    // (This is to support old IE)\r\n    if (event.pageX == null && event.clientX != null) {\r\n        const eventDoc = (event.target && event.target.ownerDocument) || document;\r\n        const doc = eventDoc.documentElement;\r\n        const body = eventDoc.body;\r\n\r\n        event.pageX = event.clientX +\r\n            ((doc && doc.scrollLeft) || (body && body.scrollLeft) || 0) -\r\n            ((doc && doc.clientLeft) || (body && body.clientLeft) || 0);\r\n        event.pageY = event.clientY +\r\n            ((doc && doc.scrollTop) || (body && body.scrollTop) || 0) -\r\n            ((doc && doc.clientTop) || (body && body.clientTop) || 0);\r\n    }\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport DataArrayScroller from './DataArrayScroller.js';\r\nimport { addCommasToNumber, convertNumToSimplifiedString } from '../utilities.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { /*faUser,*/ faUserCircle, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport './PersonNotesContainer.css';\r\n\r\n/**\r\n * \r\n * @param {RichPerson} person\r\n */\r\nfunction createUserImage(person) {\r\n    if (!person || !person.thumbnail)\r\n        return <FontAwesomeIcon icon={faUserCircle} className=\"thumbnail-image\" />\r\n\r\n    return <img src={person.thumbnail} alt={person.name} className=\"thumbnail-image\" />\r\n}\r\n\r\nfunction PersonNotesContainer() {\r\n    const firstPerson = useSelector(state => state.first.person);\r\n    const secondPerson = useSelector(state => state.second.person);\r\n\r\n    //const labels = (\r\n    //    <ul id=\"labels-container\">\r\n    //        <li>Name</li>\r\n    //        <li>Worth</li>\r\n    //        <li>Age</li>\r\n    //        <li>City</li>\r\n    //        <li>State</li>\r\n    //        <li>Country</li>\r\n    //    </ul>\r\n    //);\r\n\r\n    //const temp = (\r\n    //    <div id=\"person-notes-container\">\r\n    //        {firstPerson ? <PersonNotes person={firstPerson} /> : null}\r\n    //        {firstPerson || secondPerson ? labels : null}\r\n    //        {secondPerson ? <PersonNotes person={secondPerson} /> : null}\r\n    //    </div>\r\n    //);\r\n\r\n    function createPersonNotesTableRow(title, property) {\r\n        return (\r\n            <tr>\r\n                <td>{firstPerson && firstPerson[property]\r\n                    ? firstPerson[property]\r\n                    : \"---\"}\r\n                </td>\r\n                <th scope=\"row\">{title}</th>\r\n                <td>{secondPerson && secondPerson[property]\r\n                    ? secondPerson[property]\r\n                    : \"---\"}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    const newTable = (\r\n        <table id=\"person-notes-table\">\r\n            <caption>Information about each selected person or group.</caption>\r\n            <tbody>\r\n                {createPersonNotesTableRow(\"Name\", \"name\")}\r\n                <tr>\r\n                    <td>{firstPerson ? `$${addCommasToNumber(firstPerson.worth * 1000000)} ($${convertNumToSimplifiedString(firstPerson.worth * 1000000)})` : \"---\"}</td>\r\n                    <th scope=\"row\">Worth</th>\r\n                    <td>{secondPerson ? `$${addCommasToNumber(secondPerson.worth * 1000000)} ($${convertNumToSimplifiedString(secondPerson.worth * 1000000)})` : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.source : \"---\"}</td>\r\n                    <th scope=\"row\">Source</th>\r\n                    <td>{secondPerson ? secondPerson.source : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.age : \"---\"}</td>\r\n                    <th scope=\"row\">Age</th>\r\n                    <td>{secondPerson ? secondPerson.age : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.gender : \"---\"}</td>\r\n                    <th scope=\"row\">Gender</th>\r\n                    <td>{secondPerson ? secondPerson.gender : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.city : \"---\"}</td>\r\n                    <th scope=\"row\">City</th>\r\n                    <td>{secondPerson ? secondPerson.city : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.state : \"---\"}</td>\r\n                    <th scope=\"row\">State</th>\r\n                    <td>{secondPerson ? secondPerson.state : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson ? firstPerson.country : \"---\"}</td>\r\n                    <th scope=\"row\">Country</th>\r\n                    <td>{secondPerson ? secondPerson.country : \"---\"}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.bio\r\n                            ? <DataArrayScroller strArr={firstPerson.bio} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Bio</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.bio\r\n                            ? <DataArrayScroller strArr={secondPerson.bio} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.about\r\n                            ? <DataArrayScroller strArr={firstPerson.about} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">About</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.about\r\n                            ? <DataArrayScroller strArr={secondPerson.about} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson && firstPerson.industries\r\n                        ? firstPerson.industries\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Industries</th>\r\n                    <td>{secondPerson && secondPerson.industries\r\n                        ? secondPerson.industries\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson\r\n                        ? (firstPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : null)\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Self Made</th>\r\n                    <td>{secondPerson\r\n                        ? (secondPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : null)\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson && firstPerson.selfMadeRank\r\n                        ? firstPerson.selfMadeRank\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Self Made Rank</th>\r\n                    <td>{secondPerson && secondPerson.selfMadeRank\r\n                        ? secondPerson.selfMadeRank\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>{firstPerson && firstPerson.philanthropyScore\r\n                        ? firstPerson.philanthropyScore\r\n                        : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Philanthropy Score</th>\r\n                    <td>{secondPerson && secondPerson.philanthropyScore\r\n                        ? secondPerson.philanthropyScore\r\n                        : \"---\"}\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    const table = (\r\n        <table id=\"person-notes-table\">\r\n            <caption>Information about each selected person or group.</caption>\r\n            <tbody>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.name : \"---\"}</span></td>\r\n                    <th scope=\"row\">Name</th>\r\n                    <td><span>{secondPerson ? secondPerson.name : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? `$${addCommasToNumber(firstPerson.worth * 1000000)} ($${convertNumToSimplifiedString(firstPerson.worth * 1000000)})` : \"---\"}</span></td>\r\n                    <th scope=\"row\">Worth</th>\r\n                    <td><span>{secondPerson ? `$${addCommasToNumber(secondPerson.worth * 1000000)} ($${convertNumToSimplifiedString(secondPerson.worth * 1000000)})` : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.source : \"---\"}</span></td>\r\n                    <th scope=\"row\">Source</th>\r\n                    <td><span>{secondPerson ? secondPerson.source : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.age : \"---\"}</span></td>\r\n                    <th scope=\"row\">Age</th>\r\n                    <td><span>{secondPerson ? secondPerson.age : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.gender : \"---\"}</span></td>\r\n                    <th scope=\"row\">Gender</th>\r\n                    <td><span>{secondPerson ? secondPerson.gender : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.city : \"---\"}</span></td>\r\n                    <th scope=\"row\">City</th>\r\n                    <td><span>{secondPerson ? secondPerson.city : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.state : \"---\"}</span></td>\r\n                    <th scope=\"row\">State</th>\r\n                    <td><span>{secondPerson ? secondPerson.state : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><span>{firstPerson ? firstPerson.country : \"---\"}</span></td>\r\n                    <th scope=\"row\">Country</th>\r\n                    <td><span>{secondPerson ? secondPerson.country : \"---\"}</span></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.bio\r\n                            ? <DataArrayScroller strArr={firstPerson.bio} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">Bio</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.bio\r\n                            ? <DataArrayScroller strArr={secondPerson.bio} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        {firstPerson && firstPerson.about\r\n                            ? <DataArrayScroller strArr={firstPerson.about} buttonEdge=\"right\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                    <th scope=\"row\">About</th>\r\n                    <td>\r\n                        {secondPerson && secondPerson.about\r\n                            ? <DataArrayScroller strArr={secondPerson.about} buttonEdge=\"left\" />\r\n                            : \"---\"}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson && firstPerson.industries\r\n                                ? firstPerson.industries\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Industries</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson && secondPerson.industries\r\n                                ? secondPerson.industries\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson\r\n                                ? (firstPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : <FontAwesomeIcon icon={faTimes} />)\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Self Made</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson\r\n                                ? (secondPerson.isSelfMade ? <FontAwesomeIcon icon={faCheck} /> : <FontAwesomeIcon icon={faTimes} />)\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson && firstPerson.selfMadeRank\r\n                                ? firstPerson.selfMadeRank\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Self Made Rank</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson && secondPerson.selfMadeRank\r\n                                ? secondPerson.selfMadeRank\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <td>\r\n                        <span>\r\n                            {firstPerson && firstPerson.philanthropyScore\r\n                                ? firstPerson.philanthropyScore\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                    <th scope=\"row\">Philanthropy Score</th>\r\n                    <td>\r\n                        <span>\r\n                            {secondPerson && secondPerson.philanthropyScore\r\n                                ? secondPerson.philanthropyScore\r\n                                : \"---\"}\r\n                        </span>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"thumbnail-container\">\r\n                {createUserImage(firstPerson)}\r\n                {createUserImage(secondPerson)}\r\n            </div>\r\n            {table}\r\n        </React.Fragment>    \r\n        );\r\n    }\r\n    \r\nexport default PersonNotesContainer;","import React, { useRef, useState, useEffect } from 'react';\r\nimport './MinMaxRangeSlider.css';\r\n\r\n// TODO: Move to utilities.js\r\nfunction getPercentageOfValueBetweenTwoValues(val, min, max) {\r\n    return (val - min) / (max - min);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {Number} props.minLimit\r\n * @param {Number} props.maxLimit\r\n * @param {Number} props.step - change in value with each tick (determines number of ticks)\r\n * @param {Number} props.startingMin - starting min value (checked value is between min/max limits)\r\n * @param {Number} props.startingMax - starting max value (checked value is between min/max limits)\r\n * @param {Function} props.onMinChange - function to run when min is changed (ex. action function for Redux to send through dispatch)\r\n * @param {Function} props.onMaxChange - function to run when max is changed (ex. action function for Redux to send through dispatch)\r\n * \r\n * TODO:\r\n * - \r\n */\r\nfunction MinMaxRangeSlider(props) {\r\n    // States\r\n    //const [values, setValues] = useState([]);\r\n    const [minValue, setMinValue] = useState(\r\n        getPercentageOfValueBetweenTwoValues(\r\n            props.startingMin, props.minLimit, props.maxLimit\r\n        ) * 100 || 0\r\n    );\r\n    const [maxValue, setMaxValue] = useState(\r\n        getPercentageOfValueBetweenTwoValues(\r\n            props.startingMax, props.minLimit, props.maxLimit\r\n        ) * 100 || 100\r\n    );\r\n\r\n    // Refs\r\n    const slider = useRef(null); // element reference\r\n    const sliderBar = useRef(null); // element reference\r\n    const sliderBarStart = useRef(null); // min ball element reference\r\n    const sliderBarEnd = useRef(null); // max ball element reference\r\n\r\n    const resultsElement = useRef(null); // element reference\r\n\r\n    //const minValue = useRef(props.startingMin || 0);\r\n    //const maxValue = useRef(props.startingMax || 100);\r\n    const startX = useRef(0); // starting x-position when first click ball\r\n    const currentX = useRef(0); // current x-position when dragging ball\r\n    const target = useRef(null); // element reference to min/max ball that is moving\r\n    const targetBCR = useRef(null); // moving slider ball bounding client rect (DOMRect object)\r\n    const sliderBCR = useRef(null); // slider bar bounding client rect (DOMRect object)\r\n    const sliderStartX = useRef(null); // sliderBCR.left\r\n    const sliderEndX = useRef(null); // sliderBCR.right\r\n    const isDraggingBall = useRef(false);\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        extractValues();\r\n        //updateSliderValues();\r\n        //requestAnimationFrame(updateSliderValues);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updateSliderValues();\r\n    });\r\n\r\n    function onStart(e) {\r\n        //console.log(`onStart runs`);\r\n\r\n        target.current = e.target;\r\n        sliderBCR.current = slider.current.getBoundingClientRect();\r\n        targetBCR.current = target.current.getBoundingClientRect();\r\n\r\n        sliderStartX.current = sliderBCR.current.left;\r\n        sliderEndX.current = sliderBCR.current.right;\r\n\r\n        startX.current = e.pageX || e.touches[0].pageX;\r\n        currentX.current = startX.current;\r\n\r\n        isDraggingBall.current = true;\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    function onMove(e) {\r\n        if (!isDraggingBall.current || !target.current) return;\r\n\r\n        currentX.current = e.pageX || e.touches[0].pageX;\r\n\r\n        if (currentX.current < sliderStartX.current || currentX.current > sliderEndX.current)\r\n            return;\r\n\r\n        if (target.current === sliderBarStart.current) {\r\n            props.onMinChange(calculateValue(currentX.current - sliderStartX.current));\r\n            setMinValue(calculatePercentage(currentX.current - sliderStartX.current));\r\n        }\r\n        if (target.current === sliderBarEnd.current) {\r\n            props.onMaxChange(calculateValue(currentX.current - sliderStartX.current));\r\n            setMaxValue(calculatePercentage(currentX.current - sliderStartX.current));\r\n        }\r\n\r\n        //console.log(`onMove completes`);\r\n    }\r\n\r\n    function onEnd() {\r\n        //console.log(`onEnd starts`);\r\n\r\n        if (!isDraggingBall.current || !target.current) return;\r\n\r\n        isDraggingBall.current = false;\r\n\r\n        //console.log(`onEnd completes`);\r\n    }\r\n\r\n    function extractValues() {\r\n\r\n    }\r\n\r\n    function updateSliderValues() {\r\n        //console.log(`updateSliderValues starts`);\r\n        let tempMinValue = Math.round(minValue);\r\n        let tempMaxValue = Math.round(maxValue);\r\n\r\n        sliderBar.current.style.left = `${tempMinValue}%`;\r\n        sliderBar.current.style.right = `${100 - tempMaxValue}%`;\r\n    }\r\n\r\n    /**\r\n     * Calculates percentage (0-100%) of position along slider\r\n     * @param {Number} positionInSlider\r\n     */\r\n    function calculatePercentage(positionInSlider) {\r\n        return positionInSlider / sliderBCR.current.width * 100;\r\n    }\r\n\r\n    /**\r\n     * Calculates value from percentage and min/max limits.\r\n     * @param {Number} percentage\r\n     */\r\n    function convertPercentageToValueInRange(percentage) {\r\n        return props.minLimit + percentage * (props.maxLimit - props.minLimit);\r\n    }\r\n\r\n    /**\r\n     * Calculates value using position along slider, step, and min/max limits\r\n     * @param {Number} positionInSlider\r\n     */\r\n    function calculateValue(positionInSlider) {\r\n        const percentage = positionInSlider / sliderBCR.current.width;\r\n        const value = convertPercentageToValueInRange(percentage);\r\n        return props.step * Math.round(value / props.step);\r\n    }\r\n\r\n    /**\r\n     * Converts percentage to value for display that accounts for step and min/max\r\n     * @param {Number} percentage\r\n     * @returns {Number}\r\n     */\r\n    function getDisplayValueFromPercentage(percentage) {\r\n        const value = convertPercentageToValueInRange(percentage);\r\n        return props.step * Math.round(value / props.step);\r\n    }\r\n\r\n    return (\r\n        <div className=\"min-max-range-slider\">\r\n            <div className=\"slider-title\">{props.title}</div>\r\n            <div\r\n                className=\"slider-target\"\r\n                onMouseMove={onMove}\r\n                onMouseLeave={onEnd}\r\n                onTouchMove={onMove}\r\n            >\r\n                <div\r\n                    className=\"slider\"\r\n                    ref={slider}\r\n                >\r\n                    <div className=\"slider-bar\" ref={sliderBar}>\r\n                        <span\r\n                            className=\"slider-ball-min\"\r\n                            ref={sliderBarStart}\r\n                            onMouseDown={onStart}\r\n                            onMouseUp={onEnd}\r\n                            onTouchStart={onStart}\r\n                            onTouchEnd={onEnd}\r\n                        ></span>\r\n                        <span\r\n                            className=\"slider-ball-max\"\r\n                            ref={sliderBarEnd}\r\n                            onMouseDown={onStart}\r\n                            onMouseUp={onEnd}\r\n                            onTouchStart={onStart}\r\n                            onTouchEnd={onEnd}\r\n                        ></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"results\" ref={resultsElement}>\r\n                <div>Min:\r\n                    <span className=\"min-result\">\r\n                        {\r\n                            props.convertValueToDisplay\r\n                                ? props.convertValueToDisplay(getDisplayValueFromPercentage(minValue / 100))\r\n                                : getDisplayValueFromPercentage(minValue / 100)\r\n                        }\r\n                    </span>\r\n                </div>\r\n                <div>Max:\r\n                    <span className=\"max-result\">\r\n                        {\r\n                            props.convertValueToDisplay\r\n                                ? props.convertValueToDisplay(getDisplayValueFromPercentage(maxValue / 100))\r\n                                : getDisplayValueFromPercentage(maxValue / 100)\r\n                        }\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MinMaxRangeSlider;","import React from 'react';\r\nimport MinMaxRangeSlider from './MinMaxRangeSlider.js';\r\nimport RichPerson from '../classes/RichPerson.js';\r\nimport { convertNumToSimplifiedString } from '../utilities.js';\r\n// Redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changePerson, closePopupSelector, changeSortType, changeSortIsAscending, changeFilterAge, changeFilterWorth } from '../redux/actions.js';\r\n// Font Awesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWindowClose, faSearch } from '@fortawesome/free-solid-svg-icons';\r\n// Stylesheets\r\nimport './PersonSelectorPopup.css';\r\n\r\n/**\r\n * Returns new RichPerson[] after filtering with filterObj parameter.\r\n * @param {Object} filterObj\r\n * @param {String} filterObj.search\r\n * @param {String} filterObj.search\r\n * @returns {RichPerson[]}\r\n */\r\n//function filterDisplayedPeople(filterObj) {\r\n//    let newDisplayedPeople = RichPerson.cache.slice();\r\n//    // \r\n//}\r\n\r\n/**\r\n * Sorts RichPerson array in-place with sortObj parameter\r\n * @param {RichPerson[]} displayedPeople\r\n * @param {Object} sortObj\r\n */\r\n//function sortDisplayedPeople(displayedPeople, sortObj) {\r\n//    // If sort type is 'none', return\r\n//    if (sortObj.type === 'none') return;\r\n\r\n//    // Sort in ascending order\r\n//    displayedPeople.sort((first, second) => {\r\n//        switch (sortObj.type) {\r\n//            // Age\r\n//            case 'age':\r\n//                return first.age - second.age;\r\n\r\n//            // Alphabetical\r\n//            case 'first-name':\r\n//                return sortTwoStringsAlphabetically(\r\n//                    first.firstName.toUpperCase(), second.firstName.toUpperCase()\r\n//                );\r\n\r\n//            case 'last-name':\r\n//                return sortTwoStringsAlphabetically(\r\n//                    first.lastName.toUpperCase(), second.lastName.toUpperCase()\r\n//                );\r\n\r\n//            // Worth\r\n//            case 'worth':\r\n//                return first.worth - second.worth;\r\n\r\n//            default:\r\n//                return 0;\r\n//        }\r\n//    });\r\n\r\n//    // Reverse array if isAscending is false\r\n//    if (!sortObj.isAscending)\r\n//        displayedPeople.reverse();\r\n//}\r\n\r\n/**\r\n * Sort callback function for Array sort method to sort alphabetically.\r\n * @param {String} firstStr\r\n * @param {String} secondStr\r\n * @returns {Number}\r\n */\r\n//function sortTwoStringsAlphabetically(firstStr, secondStr) {\r\n//    if (firstStr < secondStr) return -1;\r\n//    if (firstStr > secondStr) return 1;\r\n//    return 0; // strings must be equal\r\n//}\r\n/*\r\nconst initialState = {\r\n    'displayedPeople': RichPerson.cache,\r\n    'sort': {\r\n        'isAscending': false,\r\n        'type': 'worth',\r\n    },\r\n    'filter': {\r\n        'search': \"\",\r\n        'sex': \"both\",\r\n        'wealth': {\r\n            'min': 0,\r\n            'max': 1000000000000, // one trillion dollars\r\n        },\r\n        'age': {\r\n            'min': 0,\r\n            'max': 100,\r\n        },\r\n        'countries': 'all',\r\n    },\r\n};\r\n\r\nfunction reducer(prevState, action) {\r\n    switch (action.type) {\r\n        case 'sortByType':\r\n            let newDisplayedPeople = prevState.displayedPeople.slice();\r\n            let newSortObj = { ...prevState.sort, 'type': action.value };\r\n            sortDisplayedPeople(newDisplayedPeople, newSortObj);\r\n            return {\r\n                ...prevState,\r\n                'displayedPeople': newDisplayedPeople,\r\n                'sort': newSortObj\r\n            };\r\n        case 'sortByDirection':\r\n            if (prevState.sort.isAscending === action.value)\r\n                return prevState;\r\n            return {\r\n                ...prevState,\r\n                'displayedPeople': prevState.displayedPeople.slice().reverse(),\r\n                'sort': {\r\n                    ...prevState.sort,\r\n                    'isAscending': !prevState.sort.isAscending\r\n                }\r\n            };\r\n        case 'search':\r\n        case 'filter':\r\n            break;\r\n        case 'reset':\r\n            break;\r\n        default:\r\n            return prevState;\r\n    }\r\n}\r\n*/\r\n/**\r\n * React component popup box to sort/filter/search list of people before selecting one\r\n * @param {Object} props\r\n * @param {Function} props.setSelectedPerson - Function to set selected person\r\n * @param {Function} props.setIsPersonSelectorPopupOpen - Function to set bool whether to display popup box\r\n */\r\nfunction PersonSelectorPopup(props) {\r\n    // Reducer\r\n\r\n    //const [state, dispatchReducer] = useReducer(reducer, initialState);\r\n\r\n    // Redux\r\n    const willChangeFirstPerson = useSelector(state => state.popupSelector.willChangeFirstPerson);\r\n    const displayedPeople = useSelector(state => state.popupSelector.displayedPeople);\r\n    const sortObj = useSelector(state => state.popupSelector.sort);\r\n    const wealthFilter = useSelector(state => state.popupSelector.filter.worth);\r\n    //const genderFilter = useSelector(state => state.popupSelector.filter.search);\r\n    const ageFilter = useSelector(state => state.popupSelector.filter.age);\r\n    const dispatch = useDispatch();\r\n\r\n    // Hooks\r\n\r\n    // Variables\r\n\r\n    //const displayedPeopleElementsOld = state.displayedPeople.map(person =>\r\n    //    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n    //        <span>{person.name}</span>\r\n    //        <span>{convertNumToSimplifiedString(person.worth * 1000000)}</span>\r\n    //        <span>{person.age}</span>\r\n    //    </div>\r\n    //);\r\n\r\n    const displayedPeopleElements = displayedPeople\r\n        .map(person => createPersonElement(person)); \r\n\r\n    function createPersonElement(person) {\r\n        switch (sortObj.type) {\r\n            case 'worth':\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{`$${convertNumToSimplifiedString(person.worth * 1000000)}`}</span>\r\n                        <span>{person.name}</span>\r\n                        <button onClick={() => handlePersonSelect(person)}>SELECT</button>\r\n                    </div>\r\n                );\r\n            case 'age':\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{person.age}</span>\r\n                        <span>{person.name}</span>\r\n                        <button onClick={() => handlePersonSelect(person)}>SELECT</button>\r\n                    </div>\r\n                );\r\n            case 'first-name':\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{person.name}</span>\r\n                        <span>{`$${convertNumToSimplifiedString(person.worth * 1000000)}`}</span>\r\n                        <button onClick={() => handlePersonSelect(person)}>SELECT</button>\r\n                    </div>\r\n                );\r\n            case 'last-name':\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{`${person.lastName}, ${person.firstName}`}</span>\r\n                        <span>{`$${convertNumToSimplifiedString(person.worth * 1000000)}`}</span>\r\n                        <button onClick={() => handlePersonSelect(person)}>SELECT</button>\r\n                    </div>\r\n                );\r\n            default:\r\n                return (\r\n                    <div className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                        <span>{person.name}</span>\r\n                        <span>{`$${convertNumToSimplifiedString(person.worth * 1000000)}`}</span>\r\n                        <span>{person.age}</span>\r\n                        <button onClick={() => handlePersonSelect(person)}>SELECT</button>\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n\r\n    function handlePersonSelect(person) {\r\n        dispatch(changePerson(person, willChangeFirstPerson));\r\n    }\r\n\r\n    // TODO\r\n    const peopleListTable = (\r\n        <table>\r\n            <caption></caption>\r\n            <tbody>\r\n                <tr>\r\n                    <th></th>\r\n                </tr>\r\n                {\r\n                    displayedPeople.map(person => (\r\n                        <tr className=\"displayed-person\" key={`${person.lastName}-${person.id}`}>\r\n                            \r\n                        </tr>\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n\r\n    \r\n    function handleWealthConvertValueToDisplay(val) {\r\n        //console.log(`handleWealthConvertValueToDisplay starts with val: ${val}`);\r\n        return convertNumToSimplifiedString(Math.pow(10, val));\r\n    }\r\n\r\n    return (\r\n        <div id=\"person-selector-popup\">\r\n            <div className=\"person-selector-popup-content\">\r\n                <div className=\"person-selector-popup-top-bar\">\r\n                    <div className=\"top-bar-title\">Select Person To Compare</div>\r\n                    <span\r\n                        className=\"close\"\r\n                        //onClick={() => props.setIsPersonSelectorPopupOpen(false)}\r\n                        onClick={() => dispatch(closePopupSelector())}\r\n                    >\r\n                        <FontAwesomeIcon icon={faWindowClose} />\r\n                    </span>\r\n                </div>\r\n                <div className=\"search-container\">\r\n                    <form>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Search...\"\r\n                            name=\"search\"\r\n                        />\r\n                        <button type=\"submit\">\r\n                            <FontAwesomeIcon icon={faSearch} />\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"filter-sort-displayed-container\">\r\n                    <div className=\"filter-container\">\r\n                        Filter\r\n                        <MinMaxRangeSlider\r\n                            title=\"Age\"\r\n                            minLimit={0}\r\n                            maxLimit={120}\r\n                            step={1}\r\n                            startingMin={ageFilter.min}\r\n                            startingMax={ageFilter.max}\r\n                            onMinChange={val => dispatch(changeFilterAge(val, true))}\r\n                            onMaxChange={val => dispatch(changeFilterAge(val, false))}\r\n                        />\r\n                        <MinMaxRangeSlider\r\n                            title=\"Worth\"\r\n                            minLimit={3}\r\n                            maxLimit={12}\r\n                            step={1}\r\n                            startingMin={wealthFilter.min}\r\n                            startingMax={wealthFilter.max}\r\n                            onMinChange={val => dispatch(changeFilterWorth(val, true))}\r\n                            onMaxChange={val => dispatch(changeFilterWorth(val, false))}\r\n                            convertValueToDisplay={handleWealthConvertValueToDisplay}\r\n                        />\r\n                    </div>\r\n                    <div className=\"sort-and-displayed-container\">\r\n                        <div className=\"sort-container\">\r\n                            <label htmlFor=\"sort-type-select\">\r\n                                {\"Sort: \"}\r\n                                <select\r\n                                    name=\"sort-type\"\r\n                                    id=\"sort-type-select\"\r\n                                    value={sortObj.type}\r\n                                    onChange={(e) => {\r\n                                        //dispatchReducer({ 'type': 'sortByType', 'value': e.target.value, });\r\n                                        dispatch(changeSortType(e.target.value));\r\n                                    }}\r\n                                >\r\n                                    <option value=\"none\">-- Sort By --</option>\r\n                                    <option value=\"worth\">Worth</option>\r\n                                    <option value=\"age\">Age</option>\r\n                                    <option value=\"first-name\">First Name</option>\r\n                                    <option value=\"last-name\">Last Name</option>\r\n                                </select>\r\n                            </label>\r\n\r\n                            <label htmlFor=\"sort-direction-select\">\r\n                                {\"Direction: \"}\r\n                                <select\r\n                                    name=\"sort-direction\"\r\n                                    id=\"sort-direction-select\"\r\n                                    value={sortObj.isAscending ? \"ascending\" : \"descending\"}\r\n                                    onChange={(e) => {\r\n                                        //dispatchReducer({ 'type': 'sortByDirection', 'value': (e.target.value === \"ascending\") });\r\n                                        dispatch(changeSortIsAscending(e.target.value === \"ascending\"));\r\n                                    }}\r\n                                >\r\n                                    <option value=\"descending\">Descending</option>\r\n                                    <option value=\"ascending\">Ascending</option>\r\n                                </select>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"displayed-people-container\">\r\n                            <div className=\"displayed-people-list\">\r\n                                {displayedPeopleElements}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonSelectorPopup;","export default __webpack_public_path__ + \"static/media/bill_stack_alpha_800w.b64f8e4e.png\";","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport './WealthDisplayCanvas.css';\r\nimport { useSelector } from 'react-redux';\r\nimport billStackImage from '../images/bill_stack_alpha_800w.png';\r\n\r\n/**\r\n * \r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {Number} x starting x-coords\r\n * @param {Number} y starting y-coords\r\n * @param {Object} dl change in coords on long side of bill\r\n * @param {Number} dl.x\r\n * @param {Number} dl.y\r\n * @param {Object} ds change in coords on short side of bill\r\n * @param {Number} ds.x\r\n * @param {Number} ds.y\r\n * @param {Number} tBill thickness of bill\r\n * @param {Number} tWrap thickness of bill wrap\r\n * @param {Number} nBills number of lines to represent bills in stack\r\n */\r\n// Used in drawBillStackAtScale function\r\nfunction drawBillStack(ctx, x, y, dl, ds, tBill, tWrap, nBills = 10) {\r\n    let posX = x, posY = y;\r\n\r\n    // Properties\r\n    ctx.fillStyle = 'rgb(0, 200, 0)';\r\n\r\n    // Draw full green brick\r\n    ctx.beginPath();\r\n    ctx.moveTo(x, y);\r\n    ctx.lineTo(x + dl.x, y - dl.y);\r\n    ctx.lineTo(x + dl.x + ds.x, y - dl.y + ds.y);\r\n    ctx.lineTo(x + dl.x + ds.x, y - dl.y + ds.y + tBill);\r\n    ctx.lineTo(x + ds.x, y + ds.y + tBill);\r\n    ctx.lineTo(x, y + tBill);\r\n    ctx.fill();\r\n\r\n    // Outline\r\n    ctx.beginPath();\r\n    // Outline - Top\r\n    posX = x;\r\n    posY = y;\r\n    ctx.moveTo(posX, posY);\r\n    ctx.lineTo(posX += dl.x, posY -= dl.y);\r\n    ctx.lineTo(posX += ds.x, posY += ds.y);\r\n    ctx.lineTo(posX -= dl.x, posY += dl.y);\r\n    posX = x;\r\n    posY = y;\r\n    ctx.lineTo(posX, posY);\r\n    // Outline - Short Side\r\n    ctx.lineTo(posX, posY += tBill);\r\n    ctx.lineTo(posX += ds.x, posY += ds.y);\r\n    ctx.lineTo(posX, posY -= tBill);\r\n    // Outline - Long Side\r\n    ctx.moveTo(posX, posY += tBill);\r\n    ctx.lineTo(posX += dl.x, posY -= dl.y);\r\n    ctx.lineTo(posX, posY -= tBill);\r\n    ctx.stroke();\r\n\r\n    // Bill Lines\r\n    ctx.beginPath();\r\n    posX = x + ds.x;\r\n    posY = y + ds.y;\r\n    const verticalLimit = posY + tBill;\r\n    const step = tBill / nBills;\r\n    ctx.moveTo(posX, posY += step);\r\n    while (posY < verticalLimit) {\r\n        ctx.lineTo(posX -= ds.x, posY -= ds.y);\r\n        ctx.moveTo(posX += ds.x, posY += ds.y);\r\n        ctx.lineTo(posX += dl.x, posY -= dl.y);\r\n        ctx.moveTo(posX -= dl.x, posY += dl.y + step);\r\n    }\r\n    ctx.stroke();\r\n\r\n    // Wrap\r\n    const angle = Math.atan(dl.y / dl.x);\r\n    const dWrap = { x: tWrap * Math.cos(angle), y: tWrap * Math.sin(angle) };\r\n    ctx.beginPath();\r\n    posX = x + dl.x / 2 - dWrap.x / 2;\r\n    posY = y - dl.y / 2 + dWrap.y / 2;\r\n    ctx.moveTo(posX, posY);\r\n    ctx.lineTo(posX += dWrap.x, posY -= dWrap.y);\r\n    ctx.lineTo(posX += ds.x, posY += ds.y);\r\n    ctx.lineTo(posX, posY += tBill);\r\n    ctx.lineTo(posX -= dWrap.x, posY += dWrap.y);\r\n    ctx.lineTo(posX, posY -= tBill);\r\n    ctx.closePath();\r\n    ctx.fillStyle = 'rgb(240,240,240)';\r\n    ctx.fill();\r\n    ctx.moveTo(posX, posY);\r\n    ctx.lineTo(posX += dWrap.x, posY -= dWrap.y);\r\n    ctx.stroke();\r\n\r\n    // Currency Symbol\r\n    ctx.font = `${tWrap / 2}px arial,sans-serif`;\r\n    ctx.textAlign = 'center';\r\n    ctx.fillStyle = 'black';\r\n    //ctx.setTransform(1, -0.3, 0, 1, 0, 0); // skew transform\r\n    // TEMP Start\r\n    let pos = {\r\n        x: x + dl.x / 2 + ds.x / 2,\r\n        y: y - dl.y / 2 + ds.y / 2\r\n    };\r\n    ctx.translate(pos.x, pos.y); // move canvas origin\r\n    ctx.rotate(Math.atan(ds.y / ds.x)); // rotate canvas\r\n    ctx.transform(1, 0, -1.1, 1, 0, 0); // skew transform\r\n    ctx.beginPath();\r\n    //ctx.arc(0, 0, 3, 0, 2 * Math.PI); // debug circle at origin\r\n    ctx.stroke();\r\n    // TEMP End\r\n    ctx.fillText('US\\u0024', 0, tWrap / 5);\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0); // reset transform\r\n}\r\n\r\n// Used in drawManual callback\r\nfunction drawBillStackAtScale(ctx, scale, x, y) {\r\n    const ratio = {\r\n        long: { x: 20, y: 10 }, short: { x: 10, y: 3 }\r\n    };\r\n\r\n    drawBillStack(\r\n        ctx, x, y,\r\n        { x: scale * ratio.long.x, y: scale * ratio.long.y },\r\n        { x: scale * ratio.short.x, y: scale * ratio.short.y },\r\n        scale * ratio.short.x / 2, scale * ratio.short.x / 2, scale\r\n    );\r\n}\r\n\r\n// Used in drawManual callback\r\nfunction drawBillStackImage(ctx, x, y, scale = 1) {\r\n    const img = new Image();\r\n    img.addEventListener('load', function () {\r\n        // Change x,y to correlate with center of scaled image\r\n        x -= scale * img.width / 2;\r\n        y -= scale * img.height / 2;\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            ctx.drawImage(img, x, y, scale * img.width, scale * img.height);\r\n            // Increment height for next bill stack\r\n            y -= scale * img.height * 0.21;\r\n        }\r\n    });\r\n    img.src = billStackImage;\r\n}\r\n\r\n/**\r\n * \r\n * @param {Image} image Image of bill stack with height and width cropped to bill stack edges\r\n * @param {Number} scale Scale applied to default image size\r\n * @param {Number} deltaHeightPercentage Vertical distance between individual bill stacks as a percentage of image height where 1.0 is 100%\r\n * @param {Number} n Number of single bill stacks in total stack\r\n */\r\nfunction getHeightOfStack(image, scale, deltaHeightPercentage, n) {\r\n    /*\r\n     * image: w x h\r\n     * next stack at 21% height\r\n     * Stacked\t\tHeight\r\n     * 1\t\t    h\r\n     * 2\t\t    1h + .21h = 1.21h\r\n     * 3\t\t    1h + .21h + .21h = 1.42h\r\n     * n\t\t    1h + (n-1)*.21h\r\n     * \r\n     * if height of next stack as ratio of height = d:\r\n     * 1h + dh(n - 1)\r\n     * 1h + dhn - dh\r\n     * h(1 + dn - d)\r\n     * h[1 + d(n - 1)]\r\n     */\r\n    return Math.ceil(scale * image.height * (1 + deltaHeightPercentage * (n - 1)));\r\n}\r\n\r\nfunction getHeightOfColumnSet(nBillStacks, billStackImg, scale, canvasWidth) {\r\n    // Values to position next bill stack along all three axes\r\n    // x-axis: short side, y-axis: long side, z-axis: height\r\n    const nextStackShifts = {\r\n        dx: { x: 0.30, y: 0.24 },\r\n        dy: { x: 0.72, y: 0.57 },\r\n        dz: { x: 0, y: 0.21 }\r\n    };\r\n\r\n    // Find how many columns fit in canvas width\r\n    const nColumns = Math.min(\r\n        getNumberOfColumns(billStackImg, scale, nextStackShifts.dx.x, canvasWidth),\r\n        nBillStacks\r\n    );\r\n\r\n    // Distribute total number of bills to each column stack\r\n    let stackCountsArr = new Array(nColumns);\r\n    distributeStacks(stackCountsArr.fill(0), nBillStacks);\r\n\r\n    //return stackCountsArr.reduce((a, b) => Math.max(a, b)) * nextStackShifts.dz.y * scale * billStackImg.height\r\n    //    + nColumns * nextStackShifts.dx.y * scale * billStackImg.height;\r\n    //console.log(`Max Height: ${stackCountsArr.reduce((a, b) => Math.max(a, b))}`);\r\n    const maxColumnSize = stackCountsArr.reduce((a, b) => Math.max(a, b));\r\n    console.log(`Max Column Height: ${maxColumnSize}`);\r\n    return Math.ceil(\r\n        scale * billStackImg.height * (1 + nextStackShifts.dz.y * (maxColumnSize - 2))\r\n        + scale * billStackImg.height * (1 + nextStackShifts.dx.y * (nColumns - 2))\r\n    );\r\n}\r\n\r\nfunction getNumberOfColumns(image, scale, deltaXRatio, canvasWidth) {\r\n    /*\r\n     * image: w x h\r\n     * s: scale applied to base image\r\n     * n: total number of columns (left-to-right)\r\n     * d: adjacent stack shifted to the side as ratio of image width\r\n     * C: width of canvas to fit set of columns in\r\n     * \r\n     * N    Width\r\n     * 1    sw\r\n     * 2    sw + sdw\r\n     * 3    sw + sdw + sdw\r\n     * n    sw + (n-1)sdw\r\n     * \r\n     * Solve for n:\r\n     * sw + (n-1)sdw <= C\r\n     * sdw(n-1) <= C-sw\r\n     * (n-1) <= (C-sw)/sdw\r\n     * n <= [(C-sw)/sdw] + 1\r\n     */\r\n    return Math.floor(((canvasWidth - scale * image.width) / (scale * deltaXRatio * image.width)) + 1);\r\n}\r\n\r\n/**\r\n * Create array of x-positions on canvas for each column stack centered\r\n * @param {any} n\r\n * @param {any} scaledImageWidth\r\n * @param {any} deltaXRatio\r\n * @param {any} centerX\r\n */\r\nfunction getStackXPositions(n, scaledImageWidth, deltaXRatio, centerX) {\r\n    const columnSetWidth = scaledImageWidth * (1 + deltaXRatio * (n - 1));\r\n    let stackXPositionArr = new Array(n);\r\n\r\n    for (let i = 0, x = centerX - columnSetWidth / 2;\r\n        i < stackXPositionArr.length;\r\n        i++, x += deltaXRatio * scaledImageWidth) {\r\n        stackXPositionArr[i] = x;\r\n    }\r\n    return stackXPositionArr;\r\n}\r\n\r\nfunction distributeStacks(arr, n, start = 0, end = arr.length - 1) {\r\n    const addPerStack = Math.floor(n / (end - start + 1));\r\n    // Check if n is less than the number of column stacks to add it to (addPerStack = 0)\r\n    if (!addPerStack && n) {\r\n        distributeStacks(arr, n, start, --end);\r\n        return arr;\r\n    }\r\n    // Check that start is less than end\r\n    if (start >= end) {\r\n        arr[end] += n;\r\n        return arr;\r\n    }\r\n\r\n    let newTotal = n;\r\n    for (let i = start; i <= end; i++) {\r\n        arr[i] += addPerStack;\r\n        newTotal -= addPerStack;\r\n    }\r\n    if (newTotal > 0) {\r\n        distributeStacks(arr, newTotal, ++start, --end);\r\n    }\r\n    return arr;\r\n}\r\n\r\nfunction WealthDisplayCanvas() {\r\n    // Redux\r\n    const first = useSelector(state => state.first);\r\n    const second = useSelector(state => state.second);\r\n\r\n    // States\r\n    const [canvasSize, setCanvasSize] = useState({ width: 600, height: 300 });\r\n\r\n    // Refs\r\n    const canvasContainerRef = useRef(null);\r\n    const canvasRef = useRef(null);\r\n    const ctx = useRef(null);\r\n    const billStackImg = useRef(new Image());\r\n    const intervalRef = useRef(null); // intervalID\r\n\r\n    // Callbacks\r\n\r\n    /**\r\n     * \r\n     * @param {Number} nBillStacks Total number of individual bill stacks to put into columns\r\n     * @param {Number} startX Canvas x-position of origin of stack. Bottom-middle of set of columns\r\n     * @param {Number} width Width of canvas to fit set of columns\r\n     * @param {Number} scale Scale applied to base image\r\n     * \r\n     * Next stack to the side, long edges touching - dx:0.30 dy:0.24\r\n     * Next stack to the side, short edges touching - dx:0.72 dy:0.57\r\n     * Next stack on top - dy:0.21\r\n     */\r\n    function drawNStacks(nBillStacks, startX, width, scale) {\r\n        // Values to position next bill stack along all three axes\r\n        // x-axis: short side, y-axis: long side, z-axis: height\r\n        const nextStackShifts = {\r\n            dx: { x: 0.30, y: 0.24},\r\n            dy: { x: 0.72, y: 0.57},\r\n            dz: { x: 0, y: 0.21}\r\n        };\r\n\r\n        // Find how many columns fit in canvas width\r\n        const nColumns = Math.min(\r\n            getNumberOfColumns(billStackImg.current, scale, nextStackShifts.dx.x, width),\r\n            nBillStacks\r\n        );\r\n\r\n        // Distribute total number of bills to each column stack\r\n        let stackCountsArr = new Array(nColumns);\r\n        distributeStacks(stackCountsArr.fill(0), nBillStacks);\r\n\r\n        let stackXPositionArr = getStackXPositions(nColumns, scale * billStackImg.current.width, nextStackShifts.dx.x, startX);\r\n\r\n        let currentLevelInitialHeight = ctx.current.canvas.height - scale * billStackImg.current.height * (1 + nextStackShifts.dx.y * (nColumns - 1));\r\n        for (let i = 0, currY = currentLevelInitialHeight;\r\n            i < stackXPositionArr.length;\r\n            i++, currY += nextStackShifts.dx.y * scale * billStackImg.current.height) {\r\n            ctx.current.drawImage(\r\n                billStackImg.current,\r\n                stackXPositionArr[i],\r\n                currY,\r\n                scale * billStackImg.current.width,\r\n                scale * billStackImg.current.height\r\n            );\r\n        }\r\n        \r\n        const maxLevel = stackCountsArr.reduce((a, b) => Math.max(a, b));\r\n        let currentLevel = 0;\r\n        let currY = ctx.current.canvas.height - scale * billStackImg.current.height * (1 + nextStackShifts.dx.y * (nColumns - 1));\r\n        while (currentLevel < maxLevel) {\r\n            stackCountsArr.forEach((stackCount, columnIndex) => {\r\n                if (stackCount > currentLevel) {\r\n                    ctx.current.drawImage(\r\n                        billStackImg.current,\r\n                        stackXPositionArr[columnIndex],\r\n                        currY,\r\n                        scale * billStackImg.current.width,\r\n                        scale * billStackImg.current.height\r\n                    );\r\n                }\r\n                currY += nextStackShifts.dx.y * scale * billStackImg.current.height;\r\n            });\r\n            ++currentLevel;\r\n            currY -= nColumns * nextStackShifts.dx.y * scale * billStackImg.current.height + nextStackShifts.dz.y * scale * billStackImg.current.height;\r\n        }\r\n    }\r\n\r\n    const draw = useCallback(() => {\r\n        //debugger\r\n        console.log(`draw callback starts`);\r\n\r\n        // Clear previous interval in case it's still running\r\n        if (intervalRef.current) {\r\n            console.log(`draw callback clears previous interval`);\r\n            clearInterval(intervalRef.current);\r\n        }\r\n\r\n        // Clears canvas\r\n        ctx.current.clearRect(0, 0, ctx.current.canvas.width, ctx.current.canvas.height);\r\n\r\n        // Check for zero amounts\r\n        if (!first.amount && !second.amount) {\r\n            if (!ctx.current.hidden) {\r\n                ctx.current.hidden = true;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Check if canvas is still hidden\r\n        if (ctx.current.hidden) {\r\n            ctx.current.hidden = false;\r\n        }\r\n\r\n        let firstStackAmount = Math.ceil(first.amount / 10000);\r\n        let secondstackAmount = Math.ceil(second.amount / 10000);\r\n\r\n        const scale = 0.1;\r\n        //const xStack = [\r\n        //    Math.floor(ctx.current.canvas.width / 3) - scale * billStackImg.current.width / 2,\r\n        //    Math.floor(2 * ctx.current.canvas.width / 3) - scale * billStackImg.current.width / 2\r\n        //];\r\n        //let yStack = ctx.current.canvas.height - scale * billStackImg.current.height;\r\n        //let counter = 1;\r\n\r\n        // TEMP START\r\n\r\n        //const fullHeight = getHeightOfStack(\r\n        //    billStackImg.current, scale, .21,\r\n        //    Math.max(firstStackAmount, secondstackAmount)\r\n        //);\r\n        //if (canvasSize.height !== fullHeight) {\r\n        //    setCanvasSize({ width: canvasContainerRef.current.offsetWidth, height: fullHeight });\r\n        //    return;\r\n        //}\r\n\r\n        const fullHeight = getHeightOfColumnSet(Math.max(firstStackAmount, secondstackAmount), billStackImg.current, scale, ctx.current.canvas.width / 2);\r\n        if (canvasSize.height !== fullHeight) {\r\n            setCanvasSize({ width: canvasContainerRef.current.offsetWidth, height: fullHeight });\r\n            return;\r\n        }\r\n\r\n        drawNStacks(firstStackAmount, ctx.current.canvas.width * .25, ctx.current.canvas.width / 2, scale);\r\n        drawNStacks(secondstackAmount, ctx.current.canvas.width * .75, ctx.current.canvas.width / 2, scale);\r\n        /*return;\r\n        \r\n        ctx.current.strokeRect(\r\n            xStack[0], ctx.current.canvas.height - fullHeight,\r\n            billStackImg.current.width / 2, fullHeight\r\n        );\r\n\r\n        // TEMP END\r\n\r\n        intervalRef.current = setInterval(() => {\r\n            if (counter > firstStackAmount && counter > secondstackAmount) {\r\n                console.log(`draw callback clears interval`);\r\n                clearInterval(intervalRef.current);\r\n            }\r\n\r\n            // First stack\r\n            if (counter <= firstStackAmount) {\r\n                ctx.current.drawImage(\r\n                    billStackImg.current,\r\n                    xStack[0],\r\n                    yStack,\r\n                    scale * billStackImg.current.width,\r\n                    scale * billStackImg.current.height\r\n                );\r\n            }\r\n            // Second stack\r\n            if (counter <= secondstackAmount) {\r\n                ctx.current.drawImage(\r\n                    billStackImg.current,\r\n                    xStack[1],\r\n                    yStack,\r\n                    scale * billStackImg.current.width,\r\n                    scale * billStackImg.current.height\r\n                );\r\n            }\r\n\r\n            // Increment height for next bill stack (% of height)\r\n            yStack -= scale * billStackImg.current.height * 0.21;\r\n            counter++;\r\n        }, 100);\r\n        */\r\n        console.log(`draw callback ends`);\r\n    }, [first.amount, second.amount, canvasSize]);\r\n\r\n    // Effects\r\n\r\n    // TODO - make function that returns new canvas size to run as parameter as \r\n    // initial state when creating the useState above\r\n    useEffect(() => {\r\n        if (!canvasRef.current.getContext) {\r\n            // Fallback code here if canvas NOT supported\r\n            return;\r\n        }\r\n\r\n        //canvasRef.current.width = canvasRef.current.offsetWidth;\r\n        //canvasRef.current.height = canvasRef.current.offsetHeight;\r\n        //setCanvasSize({ width: canvasRef.current.offsetWidth, height: canvasRef.current.offsetHeight });\r\n        ctx.current = canvasRef.current.getContext('2d');\r\n        setCanvasSize({ width: canvasContainerRef.current.offsetWidth, height: canvasContainerRef.current.offsetHeight });\r\n        billStackImg.current.src = billStackImage;\r\n\r\n        function handleResize() {\r\n            console.log(`handleResize runs\\nW: ${canvasContainerRef.current.offsetWidth} - H: ${canvasContainerRef.current.offsetHeight}`);\r\n            setCanvasSize({ width: canvasContainerRef.current.offsetWidth, height: canvasContainerRef.current.offsetHeight });\r\n        }\r\n\r\n        console.log('Component mounts');\r\n        window.addEventListener('resize', handleResize);\r\n         \r\n        // Cleanup (returned function runs when component unmounts)\r\n        return (() => {\r\n            console.log('Component unmounts');\r\n            window.removeEventListener('resize', handleResize);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        draw();\r\n    }, [first.amount, second.amount, draw]);\r\n\r\n    // Functions\r\n\r\n    function handleClickShowAnimation() {\r\n        draw();\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div\r\n                className={\"canvas-container\" + (!first.amount && !second.amount ? \" hide\" : \"\")}\r\n                ref={canvasContainerRef}\r\n            >\r\n                <canvas\r\n                    ref={canvasRef}\r\n                    id=\"wealth-comparison-canvas\"\r\n                    width={canvasSize.width} // Default: 300 - 600\r\n                    height={canvasSize.height} // Default: 150 - 300\r\n                >\r\n                </canvas>\r\n            </div>\r\n            <button onClick={handleClickShowAnimation}>Show Animation</button>\r\n            <div>{`W:${canvasSize.width}\\nH:${canvasSize.height}`}</div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default WealthDisplayCanvas;","import React from 'react';\r\nimport './FooterCustom.css';\r\n\r\nfunction FooterCustom() {\r\n    function getCopyrightString() {\r\n        const currentYear = new Date().getFullYear();\r\n        return currentYear === 2021\r\n            ? 2021\r\n            : `2021-${currentYear}`;\r\n    }\r\n\r\n    return (\r\n        <footer className=\"App-footer\">\r\n            <p>\r\n                <small>\r\n                    Source Code &copy; <time id=\"copyright-current-year\">{getCopyrightString()}</time> Todd Brentlinger, Santa Cruz, CA, USA. All Rights Reserved.\r\n                </small>\r\n            </p>\r\n            <p>\r\n                <small>\r\n                    Last modified on <time id=\"lastModifiedDate\"></time>\r\n                </small>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default FooterCustom;","import React, { useState, useRef } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { clampValue, checkMouseCoords } from '../utilities.js';\r\nimport './ReduxStateDisplay.css';\r\n\r\nfunction ReduxStateDisplay() {\r\n    // Redux\r\n\r\n    const reduxState = useSelector(state => state);\r\n\r\n    // States\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    // Refs\r\n\r\n    const draggableNodeRef = useRef(null);\r\n    const mouseRelativePosition = useRef({ x: 0, y: 0 });\r\n\r\n    // Functions\r\n\r\n    function handleMouseMove(event) {\r\n        event.preventDefault();\r\n        checkMouseCoords(event);\r\n        draggableNodeRef.current.style.top = `${event.pageY - mouseRelativePosition.current.y}px`;\r\n        draggableNodeRef.current.style.left = `${event.pageX - mouseRelativePosition.current.x}px`;\r\n    }\r\n\r\n    function handleMouseUp() {\r\n        // Remove event listener that moves element with the mouse\r\n        document.removeEventListener('mousemove', handleMouseMove);\r\n    }\r\n\r\n    function handleMouseDown(event) {\r\n        checkMouseCoords(event);\r\n        const clickDragRect = draggableNodeRef.current.getBoundingClientRect();\r\n        mouseRelativePosition.current = {\r\n            x: event.pageX - clickDragRect.left,\r\n            y: event.pageY - clickDragRect.top\r\n        };\r\n        // Add event listener that moves element with the mouse position\r\n        document.addEventListener('mousemove', handleMouseMove);\r\n        document.addEventListener('mouseup', handleMouseUp, { once: true });\r\n    }\r\n\r\n    function createTable() {\r\n        return (\r\n            <table className={isOpen ? null : 'hide'}>\r\n                <tbody>\r\n                    {\r\n                        Object.entries(reduxState).map(entry =>\r\n                            <React.Fragment key={entry[0]}>\r\n                                <PropertyDisplay title={entry[0]} value={entry[1]} />\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"redux-state-display-container\"\r\n            ref={draggableNodeRef}\r\n        >\r\n            <div\r\n                className=\"title-bar\"\r\n                onMouseDown={handleMouseDown}\r\n            >\r\n                Redux\r\n                <button onClick={() => setIsOpen(!isOpen)}>{isOpen ? '-' : '+'}</button>\r\n            </div>\r\n            {createTable()}\r\n        </div>\r\n    );\r\n}\r\n/*\r\n// TODO: Send state as property so can re-use component for any Redux state/store\r\nfunction ReduxStateDisplayOld() {\r\n    // Redux\r\n    const reduxState = useSelector(state => state);\r\n\r\n    // State\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isDragging, setIsDragging] = useState(false);\r\n    const [position, setPosition] = useState({ top: 0, left: 0 });\r\n\r\n    // Refs\r\n\r\n    const draggableNodeRef = useRef(null);\r\n    const cornerDiff = useRef(null);\r\n    const rect = useRef(null);\r\n\r\n    // Drag\r\n\r\n    function handleDragStart(e) {\r\n        console.log(`Drag Starts`);\r\n        e.dataTransfer.dropEffect = \"copy\";\r\n    }\r\n\r\n    function handleDragMove(e) {\r\n\r\n    }\r\n\r\n    function handleDragEnd(e) {\r\n\r\n    }\r\n\r\n    // Mouse\r\n\r\n    function handleMouseDown(e) {\r\n        setIsDragging(true);\r\n        rect.current = draggableNodeRef.current.getBoundingClientRect();\r\n        cornerDiff.current = {\r\n            x: e.clientX - rect.current.left,\r\n            y: e.clientY - rect.current.top\r\n        };\r\n    }\r\n\r\n    function handleMouseMove(e) {\r\n        if (!isDragging) return;\r\n        //console.log(`X: ${e.clientX}\\nY: ${e.clientY}`);\r\n        draggableNodeRef.current.style.left = e.clientX - cornerDiff.current.x;\r\n        draggableNodeRef.current.style.top = e.clientY - cornerDiff.current.y;\r\n        //console.log(`Mouse Move:\\nTop: ${e.clientY - cornerDiff.current.y}\\nLeft: ${e.clientX - cornerDiff.current.x}`);\r\n\r\n        // Check that values are within limits\r\n        let windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n        let windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        let newPosition = {\r\n            top: clampValue(e.clientY - cornerDiff.current.y, 0, windowHeight - rect.current.top),\r\n            left: clampValue(e.clientX - cornerDiff.current.x, 0, windowWidth - rect.current.left)\r\n        };\r\n\r\n        setPosition(newPosition);\r\n        //return;\r\n\r\n        //setPosition({\r\n        //    top: e.clientY - cornerDiff.current.y,\r\n        //    left: e.clientX - cornerDiff.current.x\r\n        //});\r\n    }\r\n\r\n    function handleMouseUp(e) {\r\n        setIsDragging(false);\r\n        cornerDiff.current = null;\r\n        console.log(`Mouse Up`);\r\n    }\r\n\r\n    function createTable() {\r\n        return (\r\n            <table className={isOpen ? null : 'hide'}>\r\n                <tbody>\r\n                    {\r\n                        Object.entries(reduxState).map(entry =>\r\n                            <React.Fragment key={entry[0]}>\r\n                                <PropertyDisplay title={entry[0]} value={entry[1]} />\r\n                            </React.Fragment>\r\n                        )\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"redux-state-display-container\"\r\n            style={{ top: position.top, left: position.left }}\r\n            //draggable={true}\r\n            ref={draggableNodeRef}\r\n            onMouseMove={handleMouseMove}\r\n        >\r\n            <div\r\n                className=\"title-bar\"\r\n                onDragStart={handleDragStart}\r\n                onMouseDown={handleMouseDown}\r\n                onMouseUp={handleMouseUp}\r\n            >\r\n                Redux\r\n                <button onClick={() => setIsOpen(!isOpen)}>{isOpen ? '-' : '+'}</button>\r\n            </div>\r\n            {createTable()}\r\n        </div>\r\n    );\r\n    \r\n    //return (\r\n    //    <div className=\"redux-state-display-container\" style={displayStyle}>\r\n    //        {Object.entries(reduxState).map(entry => createPropertyDisplay(entry[0], entry[1]))}\r\n    //    </div>\r\n    //);\r\n}\r\n*/\r\n/**\r\n * \r\n * @param {Object} props\r\n * @param {String} props.title\r\n * @param {any} props.value\r\n */\r\nfunction PropertyDisplay(props) {\r\n    // State\r\n\r\n    const [isValueShowing, setIsValueShowing] = useState(false);\r\n\r\n    // Functions\r\n\r\n    /**\r\n     * \r\n     * @param {any} value\r\n     * @returns {Element}\r\n     */\r\n    function createPropertyNode(value) {\r\n        let valueNode;\r\n        // Boolean\r\n        if (typeof value === 'boolean') {\r\n            valueNode = (<td className=\"value\">{value ? 'TRUE' : 'FALSE'}</td>);\r\n        }\r\n        // String or Number\r\n        else if (typeof value === 'string' || typeof value === 'number') {\r\n            valueNode = (<td className=\"value\">{value}</td>);\r\n        }\r\n        // Array\r\n        else if (Array.isArray(value)) {\r\n            if (!isValueShowing) {\r\n                valueNode = (\r\n                    <React.Fragment>\r\n                        <td className=\"value\">{`Array(length: ${value.length})`}</td>\r\n                        <td>\r\n                            <button onClick={() => setIsValueShowing(true)}>+</button>\r\n                        </td>\r\n                    </React.Fragment>\r\n                );\r\n            } else {\r\n                valueNode = (\r\n                    <React.Fragment>\r\n                        <td className=\"value\">\r\n                            {\r\n                                value.map((val, index) =>\r\n                                    <React.Fragment key={index}>\r\n                                        <PropertyDisplay title={index} value={val} />\r\n                                    </React.Fragment>)\r\n                            }\r\n                        </td>\r\n                        <td>\r\n                            <button onClick={() => setIsValueShowing(false)}>-</button>\r\n                        </td>\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        }\r\n        // Object\r\n        else if (typeof value === 'object' && value !== null) {\r\n            if (!isValueShowing) {\r\n                valueNode = (\r\n                    <React.Fragment>\r\n                        <td className=\"value\">{`Object[${Object.keys(value).length} keys]`}</td>\r\n                        <td>\r\n                            <button onClick={() => setIsValueShowing(true)}>+</button>\r\n                        </td>\r\n                    </React.Fragment>\r\n                );\r\n            } else {\r\n                valueNode = (\r\n                    <React.Fragment>\r\n                        <td className=\"value\">\r\n                            <table>\r\n                                <tbody>\r\n                                    {\r\n                                        Object.entries(value).map((entry) =>\r\n                                            <React.Fragment key={entry[0]}>\r\n                                                <PropertyDisplay title={entry[0]} value={entry[1]} />\r\n                                            </React.Fragment>)\r\n                                    }\r\n                                </tbody>\r\n                            </table>\r\n                        </td>\r\n                        <td>\r\n                            <button onClick={() => setIsValueShowing(false)}>-</button>\r\n                        </td>\r\n                    </React.Fragment>\r\n                );\r\n            }\r\n        }\r\n        // Other\r\n        else {\r\n            valueNode = (<td className=\"value\">{`Other [${typeof value}]`}</td>);\r\n        }\r\n\r\n        return (\r\n            <tr className=\"property\">\r\n                <td className=\"key\">\r\n                    {props.title}\r\n                </td>\r\n                {valueNode}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    return createPropertyNode(props.value);\r\n\r\n    // -----------------------------------------------------------\r\n    /*\r\n    // Boolean\r\n    if (typeof props.value === 'boolean') {\r\n        return (\r\n            <div className=\"property\" style={propertyStyle}>\r\n                <div className=\"key\">{props.title}</div>\r\n                <div className=\"value\">{props.value ? 'TRUE' : 'FALSE'}</div>\r\n            </div>\r\n        );\r\n    }\r\n    // String or Number\r\n    if (typeof props.value === 'string' || typeof props.value === 'number') {\r\n        return (\r\n            <div className=\"property\" style={propertyStyle}>\r\n                <div className=\"key\">{props.title}</div>\r\n                <div className=\"value\">{props.value}</div>\r\n            </div>\r\n        );\r\n    }\r\n    // Array\r\n    if (Array.isArray(props.value)) {\r\n        if (!isValueShowing) {\r\n            return (\r\n                <div className=\"property\" style={propertyStyle}>\r\n                    <div className=\"key\">{props.title}</div>\r\n                    <div className=\"value\">{`Array(length: ${props.value.length})`}</div>\r\n                    <button onClick={() => setIsValueShowing(true)}>+</button>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"property\" style={propertyStyle}>\r\n                <div className=\"key\">{props.title}</div>\r\n                <div className=\"value\">\r\n                    {\r\n                        props.value.map((val, index) =>\r\n                            <React.Fragment key={index}>\r\n                                <PropertyDisplay title={index} value={val} />\r\n                            </React.Fragment>)\r\n                    }\r\n                </div>\r\n                <button onClick={() => setIsValueShowing(false)}>-</button>\r\n            </div>\r\n        );\r\n    }\r\n    // Object\r\n    if (typeof props.value === 'object' && props.value !== null) {\r\n        if (!isValueShowing) {\r\n            return (\r\n                <div className=\"property\" style={propertyStyle}>\r\n                    <div className=\"key\">{props.title}</div>\r\n                    <div className=\"value\">{`Object[${Object.keys(props.value).length} keys]`}</div>\r\n                    <button onClick={() => setIsValueShowing(true)}>+</button>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <div className=\"property\" style={propertyStyle}>\r\n                <div className=\"key\">{props.title}</div>\r\n                <div className=\"value\">\r\n                    {\r\n                        Object.entries(props.value).map((entry) =>\r\n                            <React.Fragment key={entry[0]}>\r\n                                <PropertyDisplay title={entry[0]} value={entry[1]} />\r\n                            </React.Fragment>)\r\n                    }\r\n                </div>\r\n                <button onClick={() => setIsValueShowing(false)}>-</button>\r\n            </div>\r\n        );\r\n    }\r\n    // Other\r\n    return (\r\n        <div className=\"property\" style={propertyStyle}>\r\n            <div className=\"key\">{props.title}</div>\r\n            <div className=\"value\">{`Other [${typeof props.value}]`}</div>\r\n        </div>\r\n    );\r\n    */\r\n}\r\n\r\nexport default ReduxStateDisplay;","import React, { useState, useEffect } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport RichPerson from './classes/RichPerson.js';\r\nimport WealthSelector from './components/WealthSelector.js';\r\nimport PersonNotesContainer from './components/PersonNotesContainer.js';\r\nimport PersonSelectorPopup from './components/PersonSelectorPopup.js';\r\nimport WealthDisplayCanvas from './components/WealthDisplayCanvas.js';\r\nimport FooterCustom from './components/FooterCustom.js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changePerson, changeAmount, openPopupSelector } from './redux/actions.js';\r\nimport { addCommasToNumber, convertNumToSimplifiedString } from './utilities.js';\r\n\r\nimport ReduxStateDisplay from './components/ReduxStateDisplay.js';\r\n\r\n// TEMP\r\nwindow.convertNumToSimplifiedString = convertNumToSimplifiedString;\r\n\r\n// Global variable to reference RichPerson cache\r\nwindow.RichPerson = RichPerson;\r\n\r\nfunction App() {\r\n    // States\r\n\r\n    //const [firstPerson, setFirstPerson] = useState(null);\r\n    //const [firstAmount, setFirstAmount] = useState(\"\");\r\n    //const [secondPerson, setSecondPerson] = useState(null);\r\n    //const [secondAmount, setSecondAmount] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    //const [isPersonSelectorPopupOpen, setIsPersonSelectorPopupOpen] = useState(false);\r\n\r\n    // Variables\r\n\r\n    //const users = useSelector(state => state.users);\r\n    const first = useSelector(state => state.first);\r\n    const second = useSelector(state => state.second);\r\n    const selectorModal = useSelector(state => state.popupSelector);\r\n    const dispatch = useDispatch();\r\n\r\n    // Effects\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        fetch(\"forbesData.json\",\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                }\r\n            }\r\n        ).then((response) => response.json()\r\n        ).then((data) => {\r\n            data.personList.personsLists\r\n                .forEach(personData => new RichPerson(personData));\r\n            setIsLoading(false);\r\n        });\r\n    }, []);\r\n\r\n    // TEMP\r\n    //useEffect(() => {\r\n    //    console.log(`First:\\nPerson: ${first.person ? first.person.name : null}\\nAmount: ${first.amount}`);\r\n    //    console.log(`Second:\\nPerson: ${second.person ? second.person.name: null}\\nAmount: ${second.amount}`);\r\n    //}, [first, second]);\r\n\r\n    // Functions\r\n\r\n    function getDisplayedAmount(amount) {\r\n        if (!amount) return 0;\r\n\r\n        amount = Number(amount);\r\n\r\n        if (amount <= 0) return 0;\r\n\r\n        return amount < 1000 ? amount : addCommasToNumber(amount.toFixed(0));\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Boolean} isFirst\r\n     */\r\n    function handlePersonSelectButtonClick(isFirst = true) {\r\n        //setIsPersonSelectorPopupOpen(true);\r\n        //dispatch(changePopupSelectorIsDisplayed(true, isFirst));\r\n        dispatch(openPopupSelector(isFirst));\r\n    }\r\n\r\n    // Variables\r\n\r\n    const wealthComparisonContainer = (\r\n        <div id=\"wealth-comparison-container\">\r\n            <div className=\"person-container\">\r\n                <div>{`$${getDisplayedAmount(first.amount)}`}</div>\r\n                <WealthSelector isFirst={true} />\r\n                <button onClick={() => handlePersonSelectButtonClick(true)}>Change Person</button>\r\n            </div>\r\n            <div className=\"exchange-icon\">\r\n                <FontAwesomeIcon icon={faExchangeAlt} />\r\n            </div>\r\n            <div className=\"person-container\">\r\n                <div>{`$${getDisplayedAmount(second.amount)}`}</div>\r\n                <WealthSelector isFirst={false} />\r\n                <button onClick={() => handlePersonSelectButtonClick(false)}>Change Person</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    //const wealthSelectors = (\r\n    //    <div id=\"wealth-selector-container\">\r\n    //        <WealthSelector isFirst={true} />\r\n    //        <WealthSelector isFirst={false} />\r\n    //    </div>\r\n    //);\r\n\r\n    // TEMP:\r\n    const buttons = (\r\n        <div id=\"random-buttons\">\r\n            <button\r\n                onClick={\r\n                    () => dispatch(changePerson(getRandomPerson(), true))\r\n                }\r\n            >\r\n                Random First Person\r\n                </button>\r\n            <button\r\n                onClick={() => dispatch(changeAmount(getRandomAmount(), true))}\r\n            >\r\n                Random First Amount\r\n                </button>\r\n            <button\r\n                onClick={\r\n                    () => dispatch(changePerson(getRandomPerson(), false))\r\n                }\r\n            >\r\n                Random Second Person\r\n                </button>\r\n            <button\r\n                onClick={() => dispatch(changeAmount(getRandomAmount(), false))}\r\n            >\r\n                Random Second Amount\r\n                </button>\r\n        </div>\r\n    );\r\n\r\n    const mainApp = (\r\n        <main>\r\n            {selectorModal.isDisplayed\r\n                ? <PersonSelectorPopup\r\n                    //setIsPersonSelectorPopupOpen={setIsPersonSelectorPopupOpen}\r\n                    //setIsPersonSelectorPopupOpen={(val) => dispatch(changePopupSelectorIsDisplayed(val))}\r\n                />\r\n                : null}\r\n            <WealthDisplayCanvas />\r\n            {wealthComparisonContainer}\r\n            {first || second ? <PersonNotesContainer /> : null}\r\n        </main>\r\n    );\r\n\r\n    // Functions\r\n\r\n    function getRandomPerson() {\r\n        const index = Math.floor(Math.random() * RichPerson.cache.length);\r\n        return RichPerson.cache[index];\r\n    }\r\n\r\n    function getRandomAmount() {\r\n        return (Math.random() * 1000000).toFixed(2);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h1>Wealth Comparison</h1>\r\n            {buttons}\r\n            {isLoading ? null : mainApp}\r\n            {buttons}\r\n            <FooterCustom />\r\n            <ReduxStateDisplay/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","\r\n//import { ADD_USER } from './actions.js';\r\n\r\n//function userDataReducer(state = { 'users': ['Test'] }, action) {\r\n//    switch (action.type) {\r\n//        case 'ADD_USER':\r\n//            return Object.assign({}, state, {\r\n//                'users': [...state.users, action.user]\r\n//            });\r\n//        default:\r\n//            return state;\r\n//    }\r\n//}\r\n\r\n//export default userDataReducer;\r\n\r\nimport RichPerson from '../classes/RichPerson.js';\r\nimport { sortTwoStringsAlphabetically } from '../utilities.js';\r\n\r\nconst initialState = {\r\n    first: {\r\n        person: null,\r\n        amount: null,\r\n    },\r\n    second: {\r\n        person: null,\r\n        amount: null,\r\n    },\r\n    popupSelector: {\r\n        isDisplayed: false,\r\n        willChangeFirstPerson: true,\r\n        displayedPeople: RichPerson.cache,\r\n        sort: {\r\n            isAscending: false,\r\n            type: 'worth',\r\n        },\r\n        filter: {\r\n            search: \"\",\r\n            gender: \"all\",\r\n            worth: { // 10^n - use Math.pow(10,n) to get value\r\n                min: 6,\r\n                max: 12, // Use infinite max if negative number\r\n            },\r\n            age: {\r\n                min: 18,\r\n                max: 100, // Use infinite max if negative number\r\n            },\r\n            countries: [], // show all countries if empty\r\n        },\r\n    },\r\n};\r\n\r\n/**\r\n * \r\n * @param {Object} filterObj\r\n * @param {String} filterObj.search\r\n * @param {String} filterObj.gender\r\n * @param {Object} filterObj.worth\r\n * @param {Number} filterObj.worth.min\r\n * @param {Number} filterObj.worth.max\r\n * @param {Object} filterObj.age\r\n * @param {Number} filterObj.age.min\r\n * @param {Number} filterObj.age.max\r\n * @param {String[]} filterObj.countries\r\n * @returns {RichPerson[]} - Filtered array of Person objects\r\n */\r\nfunction filterDisplayedPeople(filterObj) {\r\n    return RichPerson.cache.filter(person => {\r\n        // Worth - Min\r\n        if (person.worth < Math.pow(10, filterObj.worth.min - 6))\r\n            return false;\r\n\r\n        // Worth - Max (account for negative values representing infinite max)\r\n        if (filterObj.worth.max > 0 && person.worth > Math.pow(10, filterObj.worth.max - 6))\r\n            return false;\r\n\r\n        // Age - Min\r\n        if (person.age < filterObj.age.min)\r\n            return false;\r\n\r\n        // Age - Max (account for negative values representing infinite max)\r\n        if (filterObj.age.max > 0 && person.age > filterObj.age.max)\r\n            return false;\r\n\r\n        return true;\r\n    });\r\n}\r\n\r\n/**\r\n * Sorts RichPerson array in-place with sortObj parameter\r\n * @param {RichPerson[]} displayedPeople\r\n * @param {Object} sortObj\r\n */\r\nfunction sortDisplayedPeople(displayedPeople, sortObj) {\r\n    // If sort type is 'none', return\r\n    if (sortObj.type === 'none') return;\r\n\r\n    // Sort in ascending order\r\n    displayedPeople.sort((first, second) => {\r\n        switch (sortObj.type) {\r\n            // Age\r\n            case 'age':\r\n                return first.age - second.age;\r\n\r\n            // Alphabetical\r\n            case 'first-name':\r\n                return sortTwoStringsAlphabetically(\r\n                    first.firstName.toUpperCase(), second.firstName.toUpperCase()\r\n                );\r\n\r\n            case 'last-name':\r\n                return sortTwoStringsAlphabetically(\r\n                    first.lastName.toUpperCase(), second.lastName.toUpperCase()\r\n                );\r\n\r\n            // Worth\r\n            case 'worth':\r\n                return first.worth - second.worth;\r\n\r\n            default:\r\n                return 0;\r\n        }\r\n    });\r\n\r\n    // Reverse array if isAscending is false\r\n    if (!sortObj.isAscending)\r\n        displayedPeople.reverse();\r\n}\r\n\r\nfunction personDataReducer(state = initialState, action) {\r\n    let newState, newDisplayedPeople;\r\n    switch (action.type) {\r\n        case 'CHANGE_FIRST_PERSON':\r\n            newState = Object.assign({}, state, {\r\n                first: {\r\n                    ...state.first,\r\n                    person: action.person\r\n                },\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    isDisplayed: false\r\n                }\r\n            });\r\n            if (action.person && state.second.person)\r\n                newState.first.amount = RichPerson.convertAmount(state.second.amount, state.second.person, action.person);\r\n            return newState;\r\n        case 'CHANGE_FIRST_AMOUNT':\r\n            newState = {\r\n                ...state,\r\n                first: {\r\n                    ...state.first,\r\n                    amount: action.amount\r\n                }\r\n            };\r\n            if (state.first.person && state.second.person)\r\n                newState.second.amount = RichPerson.convertAmount(action.amount, state.first.person, state.second.person);\r\n            return newState;\r\n        case 'CHANGE_SECOND_PERSON':\r\n            newState = Object.assign({}, state, {\r\n                second: {\r\n                    ...state.second,\r\n                    person: action.person\r\n                },\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    isDisplayed: false\r\n                }\r\n            });\r\n            if (action.person && state.first.person)\r\n                newState.second.amount = RichPerson.convertAmount(state.first.amount, state.first.person, action.person);\r\n            return newState;\r\n        case 'CHANGE_SECOND_AMOUNT':\r\n            newState = {\r\n                ...state,\r\n                second: {\r\n                    ...state.second,\r\n                    amount: action.amount\r\n                }\r\n            };\r\n            if (state.first.person && state.second.person) {\r\n                newState.first.amount = RichPerson.convertAmount(action.amount, state.second.person, state.first.person);\r\n            }\r\n            return newState;\r\n        // NOT NEEDED\r\n        //case 'CHANGE_POPUP_SELECTOR_IS_DISPLAYED':\r\n        //    newState = {\r\n        //        ...state,\r\n        //        popupSelector: {\r\n        //            ...state.popupSelector,\r\n        //            isDisplayed: action.value.isDisplayed,\r\n        //            willChangeFirstPerson: action.value.willChangeFirstPerson\r\n        //        }\r\n        //    };\r\n        //    return newState;\r\n        case 'OPEN_POPUP_SELECTOR':\r\n            newState = {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    isDisplayed: true,\r\n                    willChangeFirstPerson: action.willChangeFirstPerson\r\n                }\r\n            };\r\n            return newState;\r\n        case 'CLOSE_POPUP_SELECTOR':\r\n            newState = {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    isDisplayed: false\r\n                }\r\n            };\r\n            return newState;\r\n        case 'CHANGE_FILTER_MIN_AGE':\r\n            newState = {\r\n                ...state.popupSelector.filter,\r\n                age: {\r\n                    ...state.popupSelector.filter.age,\r\n                    min: action.value\r\n                }\r\n            };\r\n            newDisplayedPeople = filterDisplayedPeople(newState);\r\n            sortDisplayedPeople(newDisplayedPeople, state.popupSelector.sort);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    filter: newState\r\n                }\r\n            };\r\n        case 'CHANGE_FILTER_MAX_AGE':\r\n            newState = {\r\n                ...state.popupSelector.filter,\r\n                age: {\r\n                    ...state.popupSelector.filter.age,\r\n                    max: action.value\r\n                }\r\n            };\r\n            newDisplayedPeople = filterDisplayedPeople(newState);\r\n            sortDisplayedPeople(newDisplayedPeople, state.popupSelector.sort);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    filter: newState\r\n                }\r\n            };\r\n        case 'CHANGE_FILTER_MIN_WORTH':\r\n            newState = {\r\n                ...state.popupSelector.filter,\r\n                worth: {\r\n                    ...state.popupSelector.filter.worth,\r\n                    min: action.amount\r\n                }\r\n            };\r\n            newDisplayedPeople = filterDisplayedPeople(newState);\r\n            sortDisplayedPeople(newDisplayedPeople, state.popupSelector.sort);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    filter: newState\r\n                }\r\n            };\r\n        case 'CHANGE_FILTER_MAX_WORTH':\r\n            newState = {\r\n                ...state.popupSelector.filter,\r\n                worth: {\r\n                    ...state.popupSelector.filter.worth,\r\n                    max: action.amount\r\n                }\r\n            };\r\n            newDisplayedPeople = filterDisplayedPeople(newState);\r\n            sortDisplayedPeople(newDisplayedPeople, state.popupSelector.sort);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    filter: newState\r\n                }\r\n            };\r\n        case 'CHANGE_SORT_TYPE':\r\n            newState = {\r\n                ...state.popupSelector.sort,\r\n                type: action.value\r\n            };\r\n            newDisplayedPeople = state.popupSelector.displayedPeople.slice();\r\n            sortDisplayedPeople(newDisplayedPeople, newState);\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: newDisplayedPeople,\r\n                    sort: newState\r\n                }\r\n            };\r\n        case 'CHANGE_SORT_DIRECTION':\r\n            if (state.popupSelector.sort.isAscending === action.value)\r\n                return state;\r\n            return {\r\n                ...state,\r\n                popupSelector: {\r\n                    ...state.popupSelector,\r\n                    displayedPeople: state.popupSelector.displayedPeople.slice().reverse(),\r\n                    sort: {\r\n                        ...state.popupSelector.sort,\r\n                        isAscending: !state.popupSelector.sort.isAscending\r\n                    }\r\n                }\r\n            };\r\n        case 'CHANGE_SEARCH':\r\n        case 'CHANGE_FILTER':\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default personDataReducer;","\r\nimport { createStore } from 'redux';\r\nimport personDataReducer from './reducers.js';\r\n\r\nexport default createStore(personDataReducer);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
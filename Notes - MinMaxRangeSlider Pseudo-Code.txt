MinMaxRangeSlider Pseudo-Code:

Sam Christiensen
Dentist

constructor(
    e
    element,
    {
        startingMin,
	startingMax,
	ResultsElement, // element reference
	MessageHandler // X custom element class reference
    } = {}
) {
    // Properties
    this.values = [];
    this.minValue = startingMin || 0; // percentage for min value
    this.maxValue = startingMax || 100; // percentage for max value
    this.slider = null; // element reference
    this.sliderBar = null; // element reference
    this.sliderBarStart = null; // element reference
    this.sliderBarEnd = null; // element reference

    // Event Properties
    this.startX = 0; // starting x-position when click ball
    this.currentX = 0; // current x-position when dragging ball
    this.targetX = 0; // NOT USED
    this.target = null; // element reference of slider ball being moved
    this.targetBCR = null; // slider ball bounding client rect
    this.sliderBCR = null; // slider bounding client rect
    this.sliderStartX = null; // sliderBCR.left
    this.sliderEndX = null; // sliderBCR.right
    this.draggingBall = false;
    
    // External Elements
    this.ResultsElement = ResultsElement || false; // element that shows min/max results
    this.MessageHandler = MessageHandler || false; // X
    
    // Internal Elements
    this.rootElement = element;
    this.minControlElement = element.querySelector('#slider-min-control'); // reference to select element for min value
    this.maxControlElement = element.querySelector('#slider-max-control'); // reference to select element for max value
    this.sliderTarget = element.querySelector('#slider-target'); // reference to element containing slider bar and balls
    
    // Bind methods
    this.addEventListeners = this.addEventListeners.bind(this);
    this.onStart = this.onStart.bind(this);
    this.onMove = this.onMove.bind(this);
    this.onEnd = this.onEnd.bind(this);
    this.extractValues = this.extractValues.bind(this);
    this.hideControlElements = this.hideControlElements.bind(this);
    this.updateSliderValues = this.updateSliderValues.bind(this);
    this.updateResults = this.updateResults.bind(this);

    this.addEventListeners(); // adds event listeners for onStart, onMove, onEnd
    this.init();
	
    requestAnimationFrame(this.updateSliderValues);
}

// Not necessary. Add to add listener to each slider ball.
addEventListeners () {
    document.addEventListener('touchstart', this.onStart);
    document.addEventListener('touchmove', this.onMove);
    document.addEventListener('touchend', this.onEnd);
    
    document.addEventListener('mousedown', this.onStart);
    document.addEventListener('mousemove', this.onMove);
    document.addEventListener('mouseup', this.onEnd);
}
  
init () {
    this.extractValues();
    this.hideControlElements();
    
    this.slider = document.createElement('div');
    this.sliderBar = document.createElement('div');
    this.sliderBarStart = document.createElement('span');
    this.sliderBarEnd = document.createElement('span');
    
    this.slider.classList.add('slider');
    this.slider.dataset.min = "";
    this.slider.dataset.max = "";
    
    this.sliderBar.classList.add('slider__bar');
    this.sliderBarStart.classList.add('slider__ball');
    this.sliderBarEnd.classList.add('slider__ball');
    
    this.sliderBarStart.id = "min";
    this.sliderBarEnd.id = "max";
    
    this.sliderBar.appendChild(this.sliderBarStart);
    this.sliderBar.appendChild(this.sliderBarEnd);
    this.slider.appendChild(this.sliderBar);
    
    this.sliderTarget.appendChild(this.slider);

    this.updateSliderValues(this.minValue, this.maxValue);
}

onStart (evt) {
    if (!evt.target.classList.contains('slider__ball')) {
      return;
    }
    
    this.target = evt.target;
    this.sliderBCR = this.slider.getBoundingClientRect();
    this.targetBCR = this.target.getBoundingClientRect();
    
    this.sliderStartX = this.sliderBCR.left;
    this.sliderEndX = this.sliderBCR.right;

    console.log(this.targetBCR, this.sliderBCR);
    
    this.startX = evt.pageX || evt.touches[0].pageX;
    this.currentX = this.startX;
    
    this.draggingBall = true;
    this.target
    
    this.MessageHandler.addMessage(`onStart`);
    evt.preventDefault();
}
  
onMove (evt) {
    if (!this.draggingBall)
      return;
    
    if (!this.target)
      return;
    
    this.currentX = evt.pageX || evt.touches[0].pageX;
    
    if (this.currentX < this.sliderStartX || this.currentX > this.sliderEndX)
      return;
      
    if (this.target === this.sliderBarStart)
      this.minValue = this._calculatePercentage(this.currentX - this.sliderStartX);

    if (this.target === this.sliderBarEnd)
      this.maxValue = this._calculatePercentage(this.currentX - this.sliderStartX);
    
    this.MessageHandler.addMessage(
      `sliderStart: ${this.sliderStartX}, start: ${this.startX}, current: ${this.currentX}`
    );
}
  
onEnd (evt) {
    if (!this.draggingBall || !this.target)
      return;

    this.draggingBall = false;
    this.MessageHandler.addMessage('onEnd');
}
  
// Just adds values from control elements to 'values' property
// What is 'values' property even used for?
extractValues () {
    let minOptions = Array.from(this.minControlElement.querySelectorAll('option'));
    let maxOptions = Array.from(this.maxControlElement.querySelectorAll('option'));
    
    minOptions.forEach(el => this.values.push(el.value));
    maxOptions.forEach(el => {
      if(this.values.indexOf(el.value) < 0) {
         this.values.push(el.value);
      }
    });
    
    this.valueCount = this.values.length;
}
  
// Hides control elements by adding 'hidden' class
// Not necessary. Just add hidden class to JSX

hideControlElements () {
    this.minControlElement.classList.add('hidden');
    this.maxControlElement.classList.add('hidden');
}
  
// Changes slider bar style left and right values to represent selected range
// Passed to requestAnimationFrame()
updateSliderValues () {
    requestAnimationFrame(this.updateSliderValues);
    
    this.minValue = Math.round(this.minValue); // rounds value
    this.maxValue = Math.round(this.maxValue);
    
    this.slider.dataset.min = this.minValue; // changes data attribute on element but is never used
    this.slider.dataset.max = this.maxValue;
    
    this.sliderBar.style.left = `${this.minValue}%`;
    this.sliderBar.style.right = `${100 - this.maxValue}%`;
    
    this.updateResults(this.minValue, this.maxValue);
}